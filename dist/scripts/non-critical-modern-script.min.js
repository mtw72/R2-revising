"use strict"; const navbar = document.getElementById("navbar"), navbarToggler = document.querySelector(".navbar__toggler"), navList = document.querySelector(".navbar__collapse"), navLinks = document.querySelectorAll(".navbar__nav-link"), findusLink = document.getElementById("findus-link"), home = document.getElementById("home"); navbarToggler.addEventListener("click", (e => { navList.classList.toggle("is-opened"), navList.style.maxHeight ? (navList.style.maxHeight = null, togglerAriaNotExpanded(), navLinkAriaHidden()) : (navList.style.maxHeight = navList.scrollHeight + "px", togglerAriaExpanded(), navLinkAriaNotHidden()), e.stopPropagation() })), document.addEventListener("click", closeNavbar), findusLink.addEventListener("keydown", (e => { e.shiftKey || "Tab" !== e.key || closeNavbar() })), window.addEventListener("load", checkScreenSize), window.addEventListener("resize", debounce((() => { closeNavbar(), checkScreenSize(), adjustHeroImagePadding() }), 50)); let prevScrollPos = window.scrollY; function debounce(e, t) { let n; return function (...r) { clearTimeout(n), n = setTimeout((() => e.apply(this, r)), t) } } function togglerAriaExpanded() { navbarToggler.setAttribute("aria-expanded", "true") } function togglerAriaNotExpanded() { navbarToggler.setAttribute("aria-expanded", "false") } function togglerAriaRemoved() { navbarToggler.removeAttribute("aria-expanded", "true"), navbarToggler.removeAttribute("aria-expanded", "false") } function navLinkAriaHidden() { for (let e = 0; e < navLinks.length; e++)navLinks[e].setAttribute("tabindex", "-1"), navLinks[e].setAttribute("aria-hidden", "true") } function navLinkAriaNotHidden() { for (let e = 0; e < navLinks.length; e++)navLinks[e].setAttribute("tabindex", "0"), navLinks[e].setAttribute("aria-hidden", "false") } function navLinkAriaRemoved() { for (let e = 0; e < navLinks.length; e++)navLinks[e].removeAttribute("tabindex", "0"), navLinks[e].removeAttribute("tabindex", "-1"), navLinks[e].removeAttribute("aria-hidden", "true"), navLinks[e].removeAttribute("aria-hidden", "false") } function closeNavbar() { navList.classList.contains("is-opened") && (navList.style.maxHeight = null, navList.classList.remove("is-opened"), togglerAriaNotExpanded(), navLinkAriaHidden()) } function adjustHeroImagePadding() { let e = window.innerWidth; home.style.paddingTop = e <= 350 || e <= 600 && e > 450 ? "70px" : "0px" } function checkScreenSize() { window.innerWidth <= 576 ? (togglerAriaNotExpanded(), navLinkAriaHidden()) : (togglerAriaRemoved(), navLinkAriaRemoved()) } window.addEventListener("scroll", debounce((() => { const e = window.scrollY; window.innerWidth > 900 && (navbar.style.top = prevScrollPos > e ? "0" : "-500px"), prevScrollPos = e }), 50)); const menuAccordion = document.getElementsByClassName("accordion__button"); function handlePanelState(e, t, n) { const r = e.nextElementSibling; e.setAttribute("aria-expanded", t && n), t && n ? (r.classList.add("accordion__panel--open"), r.style.maxHeight = r.scrollHeight + "px", r.style.border = "1px solid rgba(226, 186, 137, 0.842)", r.setAttribute("role", "region")) : (r.classList.remove("accordion__panel--open"), r.style.maxHeight = null, r.style.border = "none", r.removeAttribute("role", "region")) } function openOrClosePanels() { const e = window.innerWidth <= 450; for (let t = 0; t < menuAccordion.length; t++) { const n = menuAccordion[t], r = n.classList.contains("accordion__button--active"); handlePanelState(n, r, e) } } window.addEventListener("load", openOrClosePanels), window.addEventListener("resize", openOrClosePanels); for (let e = 0; e < menuAccordion.length; e++)menuAccordion[e].addEventListener("click", (function () { this.classList.toggle("accordion__button--active"); handlePanelState(this, this.classList.contains("accordion__button--active"), !0) })); let slideIndex = 1; showSlides(slideIndex); let timer = setInterval(autoplay, 3500); function showSlides(e) { let t, n = document.getElementsByClassName("carousel__slide"), r = document.getElementsByClassName("carousel__progress"); for ((e > n.length || slideIndex > n.length) && (slideIndex = 1), e < 1 && (slideIndex = n.length), t = 0; t < n.length; t++)n[t].className = n[t].className.replace(" current-slide", ""); for (t = 0; t < r.length; t++)r[t].className = r[t].className.replace(" current-dot", ""), r[t].setAttribute("aria-current", "false"); n[slideIndex - 1].className += " current-slide", r[slideIndex - 1].className += " current-dot", r[slideIndex - 1].setAttribute("aria-current", "true") } function autoplay() { slideIndex++, showSlides() } function plusSlides(e) { showSlides(slideIndex += e), resetTimer() } function currentSlide(e) { showSlides(slideIndex = e), resetTimer() } function resetTimer() { clearInterval(timer), timer = setInterval(autoplay, 3500) } function openMenu(e, t) { let n, r, a; for (r = document.getElementsByClassName("menu__tab"), n = 0; n < r.length; n++)r[n].classList.remove("menu__tab--active"), r[n].setAttribute("aria-selected", "false"); for (e.currentTarget.classList.add("menu__tab--active"), e.currentTarget.setAttribute("aria-selected", "true"), a = document.getElementsByClassName("menu__panel"), n = 0; n < a.length; n++)a[n].style.display = "none"; document.getElementById(t).style.display = "grid" } document.getElementById("pasta-tab").click(); const reservationForm = document.getElementById("reservation-form"), submitButton = document.getElementById("formSumbitButton"), confirmationMessage = document.getElementById("confirmation-message"), closeButton = document.querySelector(".confirmation-message__close-button"), confirmButton = document.querySelector(".confirmation-message__bottom-button--confirm"), cancelButton = document.querySelector(".confirmation-message__bottom-button--cancel"); let nameInput = document.getElementById("name"), phoneNumberInput = document.getElementById("phone"), emailInput = document.getElementById("email"), guestNumberInput = document.getElementById("guest-number"), dateInput = document.getElementById("date"), timeInput = document.getElementById("time"); const timeFirstOption = document.getElementById("time-first-option"); let messageInput = document.getElementById("optional-message"); const placeholderText = "(e.g. Dietary Restriction, Special Occasions)", nameError = document.getElementById("name-error"), phoneNumberError = document.getElementById("phone-error"), emailError = document.getElementById("email-error"), guestNumberError = document.getElementById("guest-number-error"), dateError = document.getElementById("date-error"), timeError = document.getElementById("time-error"); let nameValue = document.getElementById("name-value"), phoneValue = document.getElementById("phone-value"), emailValue = document.getElementById("email-value"), guestNumberValue = document.getElementById("guest-number-value"), dateValue = document.getElementById("date-value"), timeValue = document.getElementById("time-value"), messageValue = document.getElementById("optional-message-value"); const dateOfToday = new Date, today = getFormattedDate(dateOfToday), dateOfTmr = new Date((new Date).setDate(dateOfToday.getDate() + 1)), tomorrow = getFormattedDate(dateOfTmr); function pad(e) { return (e < 10 ? "0" : "") + e } function getFormattedDate(e) { const t = e.getDate(), n = e.getMonth() + 1; return e.getFullYear() + "-" + pad(n) + "-" + pad(t) } function generateDefaultDate() { const e = dateOfToday.getDay(), t = dateOfToday.getHours(), n = dateOfToday.getMinutes(), r = e => t > e || t === e && n >= 1; switch (e) { case 0: a(r(15)); break; case 5: case 6: a(r(19)); break; default: a(r(18)) }function a(e) { e ? (dateInput.value = tomorrow, dateInput.min = tomorrow) : (dateInput.value = today, dateInput.min = today) } } function generateOptionsForRange(e, t, n) { for (let r = 12; r <= e; r++)for (let a = 0; a < 60; a += 15)if ((r !== e || 15 !== a && 30 !== a && 45 !== a) && (r > t + 1 || r === t + 1 && a >= n)) { const e = r + ":" + pad(a), t = new Option(e, e); timeInput.add(t) } } function generateTimeOptions() { const e = new Date, t = e.getDay(), n = e.getHours(), r = e.getMinutes(); if (timeInput.innerHTML = "", timeInput.appendChild(timeFirstOption), dateInput.value === today) switch (t) { case 0: generateOptionsForRange(16, n, r); break; case 5: case 6: generateOptionsForRange(20, n, r); break; default: generateOptionsForRange(19, n, r) } else if (dateInput.value > today) { switch (new Date(dateInput.value).getDay()) { case 0: generateOptionsForRange(16, -1, -1); break; case 5: case 6: generateOptionsForRange(20, -1, -1); break; default: generateOptionsForRange(19, -1, -1) } } } function updateAtSpecificTimes() { let e = new Date, t = e.getHours(), n = e.getMinutes(); t >= 11 && t < 20 && (1 !== n && 16 !== n && 31 !== n && 46 !== n || (generateDefaultDate(), generateTimeOptions())) } function selectOption(e) { "" !== e.value ? e.classList.add("valid") : e.classList.remove("valid") } function nameInputEvent() { const e = nameInput.value.trim(); e.length > 1 && /^[A-Za-z\.' \-]+$/.test(e) ? (nameInput.classList.remove("error-input"), nameInput.removeAttribute("aria-describedby", "name-error"), nameInput.removeAttribute("aria-invalid", "true"), nameError.style.display = "none") : (nameInput.classList.add("error-input"), nameInput.setAttribute("aria-describedby", "name-error"), nameInput.setAttribute("aria-invalid", "true"), nameError.style.display = "block") } function phoneNumberInputEvent() { phoneNumberInput.value.length > 6 && /[0-9+]/g.test(phoneNumberInput.value) ? (phoneNumberInput.classList.remove("error-input"), phoneNumberInput.removeAttribute("aria-describedby", "phone-error"), phoneNumberInput.removeAttribute("aria-invalid", "true"), phoneNumberError.style.display = "none") : (phoneNumberInput.classList.add("error-input"), phoneNumberInput.setAttribute("aria-describedby", "phone-error"), phoneNumberInput.setAttribute("aria-invalid", "true"), phoneNumberError.style.display = "block") } function emailInputEvent() { /^[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,}$/.test(emailInput.value) ? (emailInput.classList.remove("error-input"), emailInput.removeAttribute("aria-describedby", "email-error"), emailInput.removeAttribute("aria-invalid", "true"), emailError.style.display = "none") : (emailInput.classList.add("error-input"), emailInput.setAttribute("aria-describedby", "email-error"), emailInput.setAttribute("aria-invalid", "true"), emailError.style.display = "block") } function guestNumberInputEvent() { "" === guestNumberInput.value ? (guestNumberInput.classList.add("error-input"), guestNumberInput.setAttribute("aria-describedby", "guest-number-error"), guestNumberInput.setAttribute("aria-invalid", "true"), guestNumberError.style.display = "block") : (guestNumberInput.classList.remove("error-input"), guestNumberInput.removeAttribute("aria-describedby", "guest-number-error"), guestNumberInput.removeAttribute("aria-invalid", "true"), guestNumberError.style.display = "none") } function dateInputEvent() { new Date(dateInput.value) >= new Date(dateInput.min) ? (dateInput.classList.remove("error-input"), dateInput.removeAttribute("aria-describedby", "date-error"), dateInput.removeAttribute("aria-invalid", "true"), dateError.style.display = "none") : (dateInput.classList.add("error-input"), dateInput.setAttribute("aria-describedby", "date-error"), dateInput.setAttribute("aria-invalid", "true"), dateError.style.display = "block") } function timeInputEvent() { "" === timeInput.value ? (timeInput.classList.add("error-input"), timeInput.setAttribute("aria-describedby", "time-error"), timeInput.setAttribute("aria-invalid", "true"), timeError.style.display = "block") : (timeInput.classList.remove("error-input"), timeInput.removeAttribute("aria-describedby", "time-error"), timeInput.removeAttribute("aria-invalid", "true"), timeError.style.display = "none") } function openModal(e) { if (e.preventDefault(), confirmationMessage.style.display = "flex", confirmationMessage.setAttribute("aria-modal", "true"), nameValue.textContent = nameInput.value, phoneValue.textContent = phoneNumberInput.value, emailValue.textContent = emailInput.value, guestNumberValue.textContent = guestNumberInput.value, dateValue.textContent = dateInput.value, timeValue.textContent = timeInput.options[timeInput.selectedIndex].text, "" === messageInput.value || "(e.g. Dietary Restriction, Special Occasions)" === messageInput.value) messageValue.textContent = "N/A"; else { const e = encodeHTML(messageInput.value); messageValue.innerHTML = e } } function encodeHTML(e) { return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/(\r\n|\n|\r)/g, "<br>") } function submitForm() { const e = dateValue.innerText.trim().split("-"), t = parseInt(e[0]), n = parseInt(e[1]), r = parseInt(e[2]), a = today.split("-"), i = parseInt(a[0]), s = parseInt(a[1]), o = parseInt(a[2]), u = timeValue.innerText.trim().split(":"), l = parseInt(u[0]), d = parseInt(u[1]); let m = new Date, c = m.getHours(), p = m.getMinutes(); t < i || n < s || r < o || r === o && (l < c + 1 || l === c + 1 && d < p) ? (alert("Please select another available day or time slot."), closeMessage(), generateDefaultDate(), generateTimeOptions()) : (reservationForm.submit(), alert("Thanks for choosing our restaurant!\nWe will contact you shortly to confirm your reservation."), closeMessage(), reservationForm.reset()) } function closeMessage() { confirmationMessage.style.display = "none", confirmationMessage.setAttribute("aria-modal", "false") } function closeMessageByEsc(e) { 27 == e.keyCode && closeMessage() } generateDefaultDate(), generateTimeOptions(), dateInput.addEventListener("input", generateTimeOptions), setInterval(updateAtSpecificTimes, 6e4), guestNumberInput.addEventListener("change", (function () { selectOption(guestNumberInput) })), timeInput.addEventListener("change", (function () { selectOption(timeInput) })), messageInput.addEventListener("focus", (() => { messageInput.value.trim() === placeholderText && (messageInput.value = "") })), messageInput.addEventListener("input", (() => { messageInput.classList.toggle("input", "" !== messageInput.value.trim()) })), messageInput.addEventListener("blur", (() => { "" === messageInput.value.trim() && (messageInput.value = placeholderText, messageInput.classList.remove("input")) })), submitButton.addEventListener("click", (e => { const t = nameInput.value.trim(); nameInput.validity.patternMismatch || t.length < 2 || "" === nameInput.value ? (e.preventDefault(), nameInput.classList.add("error-input"), nameInput.setAttribute("aria-describedby", "name-error"), nameInput.setAttribute("aria-invalid", "true"), nameError.style.display = "block") : (nameInput.classList.remove("error-input"), nameError.style.display = "none"), phoneNumberInput.validity.patternMismatch || "" === phoneNumberInput.value ? (e.preventDefault(), phoneNumberInput.classList.add("error-input"), phoneNumberInput.setAttribute("aria-describedby", "phone-error"), phoneNumberInput.setAttribute("aria-invalid", "true"), phoneNumberError.style.display = "block") : (phoneNumberInput.classList.remove("error-input"), phoneNumberError.style.display = "none"), emailInput.validity.patternMismatch || "" === emailInput.value ? (e.preventDefault(), emailInput.classList.add("error-input"), emailInput.setAttribute("aria-describedby", "email-error"), emailInput.setAttribute("aria-invalid", "true"), emailError.style.display = "block") : (emailInput.classList.remove("error-input"), emailError.style.display = "none"), "" === guestNumberInput.value ? (e.preventDefault(), guestNumberInput.classList.add("error-input"), guestNumberInput.setAttribute("aria-describedby", "guest-number-error"), guestNumberInput.setAttribute("aria-invalid", "true"), guestNumberError.style.display = "block") : (guestNumberInput.classList.remove("error-input"), guestNumberError.style.display = "none"); const n = new Date(dateInput.value); n < new Date(dateInput.min) || "" === n ? (e.preventDefault(), dateInput.classList.add("error-input"), dateInput.setAttribute("aria-describedby", "date-error"), dateInput.setAttribute("aria-invalid", "true"), dateError.style.display = "block") : (dateInput.classList.remove("error-input"), dateError.style.display = "none"), "" === timeInput.value ? (e.preventDefault(), timeInput.classList.add("error-input"), timeInput.setAttribute("aria-describedby", "time-error"), timeInput.setAttribute("aria-invalid", "true"), timeError.style.display = "block") : (timeInput.classList.remove("error-input"), timeError.style.display = "none"), "block" !== nameError.style.display && "block" !== phoneNumberError.style.display && "block" !== emailError.style.display && "block" !== guestNumberError.style.display && "block" !== dateError.style.display && "block" !== timeError.style.display || alert("Please provide valid input."), nameInput.addEventListener("input", nameInputEvent), phoneNumberInput.addEventListener("input", phoneNumberInputEvent), emailInput.addEventListener("input", emailInputEvent), guestNumberInput.addEventListener("input", guestNumberInputEvent), dateInput.addEventListener("input", dateInputEvent), timeInput.addEventListener("input", timeInputEvent) })), confirmButton.addEventListener("click", submitForm), closeButton.addEventListener("click", closeMessage), cancelButton.addEventListener("click", closeMessage), window.addEventListener("keydown", closeMessageByEsc), document.getElementById("year").textContent = dateOfToday.getFullYear();
//# sourceMappingURL=non-critical-modern-script.min.js.map
