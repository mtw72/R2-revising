{"version":3,"sources":["navbar.js","accordion.js","carousel.js","menu.js","formVariables.js","formDefaultDate.js","formDefaultTime.js","formSelect.js","formValidation.js","popUpMessage.js","formTextarea.js","footer.js"],"names":["navbar","document","getElementById","navbarToggler","querySelector","navList","navLinks","querySelectorAll","home","addEventListener","event","classList","toggle","style","maxHeight","togglerAriaNotExpanded","navLinkAriaHidden","scrollHeight","togglerAriaExpanded","navLinkAriaNotHidden","stopPropagation","closeNavbar","length","shiftKey","key","window","checkScreenSize","debounce","adjustHeroImagePadding","prevScrollPos","scrollY","func","wait","timeout","args","clearTimeout","setTimeout","apply","this","setAttribute","togglerAriaRemoved","removeAttribute","i","navLinkAriaRemoved","contains","remove","screenWidth","innerWidth","paddingTop","currentScrollPos","top","menuAccordion","getElementsByClassName","openOrClosePanels","handlePanelState","button","isActive","isSmallScreen","menuPanel","nextElementSibling","add","border","time","timeInterval","carouselTrack","slides","prevButton","nextButton","playButton","pauseButton","progressList","progressContainers","progressBars","bar1","bar2","bar3","memo","dynamicFrame","currentProgressContainer","currentProgressBar","width","isPlay","slideIndex","showSlides","progressStart","plusSlides","progressPause","togglePlayPauseButtons","progressResume","focus","preventDefault","currentSlide","n","frame","setInterval","clearInterval","checkDotColor","resetProgressBar","preUpdateByUser","postUpdateByUser","pastaTab","riceTab","sidesTab","openMenu","menuName","menutabs","menus","currentTarget","display","click","reservationForm","submitButton","confirmationMessage","closeButton","confirmButton","cancelButton","nameInput","phoneNumberInput","emailInput","guestNumberInput","dateInput","timeInput","timeFirstOption","messageInput","placeholderText","nameError","phoneNumberError","emailError","guestNumberError","dateError","timeError","nameValue","phoneValue","emailValue","guestNumberValue","dateValue","timeValue","messageValue","dateOfToday","Date","today","getFormattedDate","dateOfTmr","setDate","getDate","tomorrow","pad","number","date","dd","mm","getMonth","getFullYear","generateDefaultDate","tdyDay","getDay","tdyHour","getHours","tdyMinute","getMinutes","isAfterCutoff","cutoffHour","setDefaultDate","value","min","generateOptionsForRange","endHour","currentHour","currentMinute","hour","minute","optionText","option","Option","generateTimeOptions","now","dayIndex","innerHTML","appendChild","updateAtSpecificTimes","currentTime","selectOption","selectedElement","nameInputEvent","trimmedValue","trim","test","phoneNumberInputEvent","emailInputEvent","guestNumberInputEvent","dateInputEvent","timeInputEvent","openModal","textContent","options","selectedIndex","text","encodedMessage","encodeHTML","replace","submitForm","selectedDateComponents","innerText","split","selectedYear","parseInt","selectedMonth","selectedDate","benchmarkDateComponents","benchmarkYear","benchmarkMonth","benchmarkDate","timeComponents","selectedHour","selectedMinute","alert","closeMessage","submit","reset","closeMessageByEsc","keyCode","validity","patternMismatch"],"mappings":"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","file":"non-critical-modern-script.min.js","sourcesContent":["'use strict';\r\n\r\n// ******** VARIABLES ******** //\r\n\r\n// Get the elements inside the navbar and the home section\r\nconst navbar = document.getElementById(\"navbar\");\r\nconst navbarToggler = document.querySelector('.navbar__toggler');\r\nconst navList = document.querySelector('.navbar__collapse');\r\nconst navLinks = document.querySelectorAll('.navbar__nav-link');\r\nconst home = document.getElementById(\"home\");\r\n\r\n\r\n// ******** EVENT LISTENERS ******** //\r\n\r\n// Show or hide the collapsible navbar when toggler is clicked\r\nnavbarToggler.addEventListener('click', (event) => {\r\n  // Toggle the visibility of navList\r\n  navList.classList.toggle('is-opened');\r\n  if (navList.style.maxHeight) {\r\n    // If navList is open, close it\r\n    navList.style.maxHeight = null;\r\n    // Set the toggler NOT to be aria-expanded\r\n    togglerAriaNotExpanded();\r\n    // Set the navlinks to be aria-hidden and tab-index = -1\r\n    navLinkAriaHidden();\r\n  } else {\r\n    // If navList is closed, open it\r\n    navList.style.maxHeight = navList.scrollHeight + \"px\";\r\n    // Set the toggler to be aria-expanded\r\n    togglerAriaExpanded();\r\n    // Set the navlinks NOT to be aria-hidden and tab-index = 0\r\n    navLinkAriaNotHidden();\r\n  }\r\n  event.stopPropagation();\r\n});\r\n\r\n// Hide the collapsible navbar when the nav link is clicked or when the user clicks anywhere outside of the navbar\r\ndocument.addEventListener('click', closeNavbar);\r\n\r\n// For keyboard user, close the navbar if the key \"TAB\" is pressed\r\n// let the navbar stay open if the key \"SHIFT\" + \"TAB\" are pressed\r\n// Close the navbar on \"TAB\" key press\r\nnavLinks[navLinks.length - 1].addEventListener('keydown', (event) => {\r\n  if (!event.shiftKey && event.key === 'Tab') {\r\n    closeNavbar();\r\n  }\r\n});\r\n\r\n//Check the screen size onload and assign appropriate aria attributes to HTML elements\r\nwindow.addEventListener('load', checkScreenSize);\r\n\r\n// Handle resize event with debounce\r\n// 1. Close the navbar\r\n// 2. Check the screen size and assign appropriate aria attributes to HTML elements\r\n// 3. Check if needed to adjust the padding-top value of hero-image\r\nwindow.addEventListener('resize', debounce(() => {\r\n  closeNavbar();\r\n  checkScreenSize();\r\n  adjustHeroImagePadding();\r\n}, 50));\r\n\r\n// Handle scroll event with debounce\r\n// On screen wider than 900px, when the user scrolls down, hide the navbar.\r\n// Show the navbar when the user scrolls up\r\nlet prevScrollPos = window.scrollY;\r\nwindow.addEventListener('scroll', debounce(() => {\r\n  const currentScrollPos = window.scrollY;\r\n  if (window.innerWidth > 900) {\r\n    navbar.style.top = prevScrollPos > currentScrollPos ? \"0\" : \"-500px\";\r\n  }\r\n  prevScrollPos = currentScrollPos;\r\n}, 50));\r\n\r\n\r\n// ******** FUNCTIONS ******** //\r\n\r\n// Debounce function\r\nfunction debounce(func, wait) {\r\n  let timeout;\r\n  return function (...args) {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(this, args), wait);\r\n  };\r\n}\r\n\r\n// Functions to set / remove the aria attribute(s) of toggler (aria-expanded)\r\nfunction togglerAriaExpanded() {\r\n  navbarToggler.setAttribute('aria-expanded', 'true');\r\n}\r\n\r\nfunction togglerAriaNotExpanded() {\r\n  navbarToggler.setAttribute('aria-expanded', 'false');\r\n}\r\n\r\nfunction togglerAriaRemoved() {\r\n  navbarToggler.removeAttribute('aria-expanded', 'true');\r\n  navbarToggler.removeAttribute('aria-expanded', 'false');\r\n}\r\n\r\n// Functions to set / remove the aria attributes of navlinks (tabindex and aria-hidden)\r\nfunction navLinkAriaHidden() {\r\n  for (let i = 0; i < navLinks.length; i++) {\r\n    navLinks[i].setAttribute('tabindex', '-1');\r\n    navLinks[i].setAttribute('aria-hidden', 'true');\r\n  }\r\n}\r\n\r\nfunction navLinkAriaNotHidden() {\r\n  for (let i = 0; i < navLinks.length; i++) {\r\n    navLinks[i].setAttribute('tabindex', '0');\r\n    navLinks[i].setAttribute('aria-hidden', 'false');\r\n  }\r\n}\r\n\r\nfunction navLinkAriaRemoved() {\r\n  for (let i = 0; i < navLinks.length; i++) {\r\n    navLinks[i].removeAttribute('tabindex', '0');\r\n    navLinks[i].removeAttribute('tabindex', '-1');\r\n    navLinks[i].removeAttribute('aria-hidden', 'true');\r\n    navLinks[i].removeAttribute('aria-hidden', 'false');\r\n  }\r\n}\r\n\r\n// Function to close the collapsible navbar\r\nfunction closeNavbar() {\r\n  if (navList.classList.contains('is-opened')) {\r\n    navList.style.maxHeight = null;\r\n    navList.classList.remove('is-opened');\r\n    togglerAriaNotExpanded();\r\n    navLinkAriaHidden();\r\n  }\r\n}\r\n\r\n// Function to adjust the padding top of the hero image according to the screen size\r\nfunction adjustHeroImagePadding() {\r\n  // Update the screenWidth variable with the current window width\r\n  let screenWidth = window.innerWidth;\r\n\r\n  // Check the screenWidth and adjust value of paddingTop accordingly\r\n  home.style.paddingTop = (screenWidth <= 350 || (screenWidth <= 600 && screenWidth > 450)) ? \"70px\" : \"0px\";\r\n}\r\n\r\n// Function to check the screen size and assign aria attributes to HTML elements\r\n// For use when onload and onresize\r\nfunction checkScreenSize() {\r\n  let screenWidth = window.innerWidth;\r\n  // On small screen, set the toggler to be aria-expanded,\r\n  // set the navlinks to be aria-hidden and tab-index = -1\r\n  if (screenWidth <= 576) {\r\n    togglerAriaNotExpanded();\r\n    navLinkAriaHidden();\r\n  }\r\n  // On large screen, remove the aria-expanded attribute of the toggler,\r\n  // remove aria-hidden and tab-index attributes of navlinks\r\n  else {\r\n    togglerAriaRemoved();\r\n    navLinkAriaRemoved();\r\n  }\r\n}","'use strict';\r\n\r\n// ******** VARIABLES ******** //\r\n\r\n// Get all elements with the class \"accordion__button\"\r\nconst menuAccordion = document.getElementsByClassName(\"accordion__button\");\r\n\r\n\r\n// ******** EVENT LISTENERS ******** //\r\n\r\n// Add event listener for window load to open active panels\r\nwindow.addEventListener('load', openOrClosePanels);\r\n\r\n// Add event listener for window resize to open active panels or remove aria attributes\r\nwindow.addEventListener('resize', openOrClosePanels);\r\n\r\n// Add event listener to the menu accordion to toggle panel open or close\r\nfor (let i = 0; i < menuAccordion.length; i++) {\r\n  menuAccordion[i].addEventListener(\"click\", function () {\r\n    this.classList.toggle(\"accordion__button--active\");\r\n    const isActive = this.classList.contains(\"accordion__button--active\");\r\n    handlePanelState(this, isActive, true); // Always handle click events as small screen actions\r\n  });\r\n}\r\n\r\n\r\n// ******** FUNCTIONS ******** //\r\n\r\n// Function to handle panel state based on button and screen size\r\nfunction handlePanelState(button, isActive, isSmallScreen) {\r\n  const menuPanel = button.nextElementSibling;\r\n\r\n  // Set aria-expanded attribute\r\n  button.setAttribute('aria-expanded', isActive && isSmallScreen);\r\n\r\n  if (isActive && isSmallScreen) {\r\n    // Open the panel\r\n    menuPanel.classList.add(\"accordion__panel--open\");\r\n    menuPanel.style.maxHeight = menuPanel.scrollHeight + \"px\";\r\n    menuPanel.style.border = \"1px solid rgba(226, 186, 137, 0.842)\";\r\n    menuPanel.setAttribute('role', 'region');\r\n  } else {\r\n    // Close the panel\r\n    menuPanel.classList.remove(\"accordion__panel--open\");\r\n    menuPanel.style.maxHeight = null;\r\n    menuPanel.style.border = \"none\";\r\n    menuPanel.removeAttribute('role', 'region');\r\n  }\r\n}\r\n\r\n// Function to open active panels when window width is <= 450px\r\nfunction openOrClosePanels() {\r\n  const isSmallScreen = window.innerWidth <= 450;\r\n\r\n  for (let i = 0; i < menuAccordion.length; i++) {\r\n    const button = menuAccordion[i];\r\n    const isActive = button.classList.contains(\"accordion__button--active\");\r\n    handlePanelState(button, isActive, isSmallScreen);\r\n  }\r\n}","'use strict';\r\n\r\n// Carousel for small & medium menu\r\n\r\n// ******** VARIABLES ******** //\r\n\r\n// Set the time for autoplay\r\nconst time = 3.5; //3.5 seconds\r\nconst timeInterval = time * 1000 / 100;\r\n\r\n// Get the elements in carousel\r\nconst carouselTrack = document.getElementById(\"carousel__track\");\r\nconst slides = document.getElementsByClassName(\"carousel__slide\");\r\nconst prevButton = document.querySelector(\".carousel__prev-button\");\r\nconst nextButton = document.querySelector(\".carousel__next-button\");\r\nconst playButton = document.querySelector(\".carousel__play-button\");\r\nconst pauseButton = document.querySelector(\".carousel__pause-button\");\r\nconst progressList = document.querySelector(\".carousel__progress-list\");\r\nconst progressContainers = document.getElementsByClassName(\"carousel__progress-container\");\r\nconst progressBars = document.getElementsByClassName(\"carousel__progress-bar\");\r\nconst bar1 = document.getElementById(\"bar1\");\r\nconst bar2 = document.getElementById(\"bar2\");\r\nconst bar3 = document.getElementById(\"bar3\");\r\n\r\n// Create variables for progress bar\r\nlet currentProgressContainer = document.querySelector(\".carousel__progress-container.current-container\");\r\nlet currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\nlet width = 0, memo, dynamicFrame;\r\nlet isPlay = true;\r\n\r\n\r\n// ******** INITIALIZATION ******** //\r\n\r\n// Initialize the slide index to the first slide\r\nlet slideIndex = 1;\r\nshowSlides(slideIndex);\r\nprogressStart();\r\n\r\n\r\n// ******** EVENT LISTENERS ******** //\r\n\r\n// Add event listeners to previous and next buttons\r\nprevButton.addEventListener(\"click\", () => {\r\n  plusSlides(-1);\r\n});\r\n\r\nnextButton.addEventListener(\"click\", () => {\r\n  plusSlides(1);\r\n});\r\n\r\n// Add event listeners to play and pause buttons\r\npauseButton.addEventListener(\"click\", () => {\r\n  progressPause();\r\n  togglePlayPauseButtons();\r\n});\r\n\r\nplayButton.addEventListener(\"click\", () => {\r\n  progressResume();\r\n  togglePlayPauseButtons();\r\n});\r\n\r\n// Add event listeners to progress list\r\nprogressList.addEventListener('keydown', (event) => {\r\n  switch (event.key) {\r\n    case 'ArrowLeft':\r\n      plusSlides(-1);\r\n      currentProgressContainer = document.querySelector(\".carousel__progress-container.current-container\");\r\n      currentProgressContainer.focus();\r\n      break;\r\n    case 'ArrowRight':\r\n      plusSlides(1);\r\n      currentProgressContainer = document.querySelector(\".carousel__progress-container.current-container\");\r\n      currentProgressContainer.focus();\r\n      break;\r\n    case 'Tab':\r\n      event.preventDefault(); // Prevent default Tab behavior\r\n      if (event.shiftKey) {\r\n        // Handle Shift + Tab\r\n        if (playButton.classList.contains(\"hidden\")) {\r\n          pauseButton.focus();\r\n        } else {\r\n          playButton.focus();\r\n        }\r\n      } else {\r\n        // Handle regular Tab\r\n        let nameInput = document.getElementById(\"name\");\r\n        nameInput.focus();\r\n      }\r\n      break;\r\n  }\r\n});\r\n\r\n// Add event listeners to each progress container\r\nfor (let i = 0; i < progressContainers.length; i++) {\r\n  progressContainers[i].addEventListener(\"click\", () => {\r\n    currentSlide(1 + i);\r\n  });\r\n}\r\n\r\n\r\n// ******** FUNCTIONS ******** //\r\n\r\n// Function to display the slide corresponding to the given index 'n'\r\nfunction showSlides(n) {\r\n\r\n  // If 'n' is greater than the number of slides or the current slide index is greater than the number of slides, reset to the first slide\r\n  if (n > slides.length || slideIndex > slides.length) { slideIndex = 1 }\r\n  // If 'n' is less than 1, set the slide index to the last slide\r\n  if (n < 1) { slideIndex = slides.length }\r\n\r\n  // Hide all the slides by removing the 'current-slide' class\r\n  for (let i = 0; i < slides.length; i++) {\r\n    slides[i].classList.remove(\"current-slide\");\r\n    progressContainers[i].classList.remove(\"current-container\");\r\n    progressBars[i].classList.remove(\"current-bar\");\r\n    progressContainers[i].setAttribute(\"aria-selected\", \"false\");\r\n    progressContainers[i].setAttribute(\"tab-index\", \"-1\");\r\n  }\r\n\r\n  // Show the current slide by adding the 'current-slide' class, and setting 'aria-current' attribute to true\r\n  slides[slideIndex - 1].classList.add(\"current-slide\");\r\n  progressContainers[slideIndex - 1].classList.add(\"current-container\");\r\n  progressBars[slideIndex - 1].classList.add(\"current-bar\");\r\n  progressContainers[slideIndex - 1].setAttribute(\"aria-selected\", \"true\");\r\n  progressContainers[slideIndex - 1].removeAttribute(\"tab-index\", \"-1\");\r\n}\r\n\r\n// Function to start the progress initially\r\nfunction progressStart() {\r\n  frame();\r\n  dynamicFrame = setInterval(frame, timeInterval);\r\n}\r\n\r\n// Function for the progress bar to advance\r\nfunction frame() {\r\n  currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\n  if (width < 100) {\r\n    width++;\r\n    currentProgressBar.style.width = width + \"%\";\r\n    memo = width;\r\n  } else {\r\n    clearInterval(dynamicFrame); // Clear the coming round\r\n    currentProgressBar.style.width = \"0.75rem\";\r\n    slideIndex++; // Advance to the next slide\r\n    showSlides(slideIndex);\r\n    checkDotColor(slideIndex);\r\n    resetProgressBar();\r\n    progressStart();\r\n    carouselTrack.setAttribute(\"aria-live\", \"off\");\r\n  }\r\n}\r\n\r\n// Function to change the dot color according to the slide position\r\nfunction checkDotColor(slideIndex) {\r\n  for (let i = 0; i < progressBars.length; i++) {\r\n    progressBars[i].classList.remove(\"finished-bar\");\r\n  }\r\n  if (slideIndex === 2) {\r\n    bar1.classList.add(\"finished-bar\");\r\n  }\r\n  if (slideIndex === 3) {\r\n    bar1.classList.add(\"finished-bar\");\r\n    bar2.classList.add(\"finished-bar\");\r\n  }\r\n}\r\n\r\n// Helper function to reset the progress bar\r\nfunction resetProgressBar() {\r\n  currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\n  width = 0; // Reset width\r\n  currentProgressBar.style.width = width + \"%\";\r\n  memo = width;\r\n}\r\n\r\n// Function to pause the progress bar running\r\nfunction progressPause() {\r\n  carouselTrack.setAttribute(\"aria-live\", \"polite\");\r\n  isPlay = false;\r\n  clearInterval(dynamicFrame);\r\n}\r\n\r\n// Function to resume the progress bar running\r\nfunction progressResume() {\r\n  carouselTrack.setAttribute(\"aria-live\", \"off\");\r\n  isPlay = true;\r\n  currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\n  width = memo; // Restore the width from memo\r\n  if (width < 100) {\r\n    currentProgressBar.style.width = width + \"%\";\r\n    progressStart();\r\n  } else {\r\n    currentProgressBar.style.width = \"0.75rem\";\r\n    slideIndex++; // Advance to the next slide\r\n    showSlides(slideIndex);\r\n    resetProgressBar();\r\n    progressStart();\r\n  }\r\n}\r\n\r\n// Helper function to pre-update the carousel initiated by user\r\nfunction preUpdateByUser() {\r\n  clearInterval(dynamicFrame);\r\n  carouselTrack.setAttribute(\"aria-live\", \"polite\");\r\n  currentProgressBar = document.querySelector(\".carousel__progress-bar.current-bar\");\r\n  currentProgressBar.style.width = \"0.75rem\";\r\n}\r\n\r\n// Function to advance the slide by a given number 'n' (positive or negative)\r\nfunction plusSlides(n) {\r\n  preUpdateByUser();\r\n  slideIndex += n;\r\n  showSlides(slideIndex);\r\n  postUpdateByUser();\r\n}\r\n\r\n// Function to display the slide corresponding to a given dot\r\nfunction currentSlide(n) {\r\n  preUpdateByUser();\r\n  slideIndex = n;\r\n  showSlides(slideIndex);\r\n  postUpdateByUser();\r\n}\r\n\r\n// Helper function to post-update the carousel initiated by user\r\nfunction postUpdateByUser() {\r\n  checkDotColor(slideIndex);\r\n  resetProgressBar();\r\n  if (isPlay) {\r\n    progressStart();\r\n  }\r\n}\r\n\r\n// Function to toggle play/pause button visibility and aria-hidden attribute\r\nfunction togglePlayPauseButtons() {\r\n  playButton.classList.toggle(\"hidden\");\r\n  pauseButton.classList.toggle(\"hidden\");\r\n  playButton.setAttribute('aria-hidden', playButton.classList.contains(\"hidden\"));\r\n  pauseButton.setAttribute('aria-hidden', pauseButton.classList.contains(\"hidden\"));\r\n}","'use strict';\r\n\r\n// ******** VARIABLES ******** //\r\n\r\nconst pastaTab = document.getElementById(\"pasta-tab\");\r\nconst riceTab = document.getElementById(\"rice-tab\");\r\nconst sidesTab = document.getElementById(\"sides-tab\");\r\n\r\n\r\n// ******** EVENT LISTENERS ******** //\r\n\r\npastaTab.addEventListener(\"click\", (event) => {\r\n  openMenu(event, \"pasta-menu\");\r\n});\r\n\r\nriceTab.addEventListener(\"click\", (event) => {\r\n  openMenu(event, \"rice-menu\");\r\n});\r\n\r\nsidesTab.addEventListener(\"click\", (event) => {\r\n  openMenu(event, \"sides-menu\");\r\n});\r\n\r\n\r\n// ******** INITIALIZATION ******** //\r\n\r\n// Automatically click the tab with the ID \"pasta-tab\" to initialize the menu on page load\r\npastaTab.click();\r\n\r\n\r\n// ******** FUNCTIONS ******** //\r\n\r\n// Function to open a menu based on a tab click event\r\nfunction openMenu(event, menuName) {\r\n  let i, menutabs, menus;\r\n  menutabs = document.getElementsByClassName(\"menu__tab\");\r\n\r\n  // Loop through each menu tab to deactivate it\r\n  for (i = 0; i < menutabs.length; i++) {\r\n    menutabs[i].classList.remove(\"menu__tab--active\");\r\n    menutabs[i].setAttribute('aria-selected', 'false');\r\n  }\r\n  // Activate the clicked tab\r\n  event.currentTarget.classList.add(\"menu__tab--active\");\r\n  event.currentTarget.setAttribute('aria-selected', 'true');\r\n\r\n  menus = document.getElementsByClassName(\"menu__panel\");\r\n  // Loop through each menu panel to hide it\r\n  for (i = 0; i < menus.length; i++) {\r\n    menus[i].style.display = \"none\";\r\n  }\r\n  // Display the selected menu panel\r\n  document.getElementById(menuName).style.display = \"grid\";\r\n}","'use strict';\r\n\r\n// ******** FORM VARIABLES ******** //\r\n\r\n// Get the form elements\r\nconst reservationForm = document.getElementById(\"reservation-form\");\r\nconst submitButton = document.getElementById('formSumbitButton');\r\nconst confirmationMessage = document.getElementById(\"confirmation-message\");\r\nconst closeButton = document.querySelector(\".confirmation-message__close-button\");\r\nconst confirmButton = document.querySelector(\".confirmation-message__bottom-button--confirm\");\r\nconst cancelButton = document.querySelector(\".confirmation-message__bottom-button--cancel\");\r\n\r\n// Get the form input elements\r\nlet nameInput = document.getElementById(\"name\");\r\nlet phoneNumberInput = document.getElementById(\"phone\");\r\nlet emailInput = document.getElementById(\"email\");\r\nlet guestNumberInput = document.getElementById('guest-number');\r\nlet dateInput = document.getElementById('date');\r\nlet timeInput = document.getElementById('time');\r\nconst timeFirstOption = document.getElementById('time-first-option');\r\nlet messageInput = document.getElementById(\"optional-message\");\r\nconst placeholderText = '(e.g. Dietary Restriction, Special Occasions)';\r\n\r\n// Get the form error message of input elements\r\nconst nameError = document.getElementById(\"name-error\");\r\nconst phoneNumberError = document.getElementById(\"phone-error\");\r\nconst emailError = document.getElementById(\"email-error\");\r\nconst guestNumberError = document.getElementById(\"guest-number-error\");\r\nconst dateError = document.getElementById(\"date-error\");\r\nconst timeError = document.getElementById(\"time-error\");\r\n\r\n// Get the form output elements\r\nlet nameValue = document.getElementById(\"name-value\");\r\nlet phoneValue = document.getElementById(\"phone-value\");\r\nlet emailValue = document.getElementById(\"email-value\");\r\nlet guestNumberValue = document.getElementById(\"guest-number-value\");\r\nlet dateValue = document.getElementById(\"date-value\");\r\nlet timeValue = document.getElementById(\"time-value\");\r\nlet messageValue = document.getElementById(\"optional-message-value\");","'use strict';\r\n\r\n// Set default date for date picker\r\n// If the cutoff time has yet to be reached, set today as default date\r\n// If the cutoff time has been reached, set tomorrow as default date\r\n\r\n\r\n// ******** VARIABLES ******** //\r\n\r\n// Get date of today\r\nconst dateOfToday = new Date();\r\nconst today = getFormattedDate(dateOfToday);\r\n\r\n// Get date of tomorrow\r\nconst dateOfTmr = new Date(new Date().setDate(dateOfToday.getDate() + 1));\r\nconst tomorrow = getFormattedDate(dateOfTmr);\r\n\r\n\r\n// ******** INITIALIZATION ******** //\r\n\r\n// Generate default date when the page loads\r\ngenerateDefaultDate();\r\n\r\n\r\n// ******** FUNCTIONS ******** //\r\n\r\n// Helper function to pad single digit numbers with leading zero\r\nfunction pad(number) {\r\n  return (number < 10 ? '0' : '') + number;\r\n}\r\n\r\n// Function to get the formatted date string (yyyy-mm-dd)\r\nfunction getFormattedDate(date) {\r\n  const dd = date.getDate();\r\n  const mm = date.getMonth() + 1;\r\n  const yyyy = date.getFullYear();\r\n  return yyyy + \"-\" + pad(mm) + \"-\" + pad(dd);\r\n}\r\n\r\n// Function to set default date (.value) and prevent choosing invalid dates (.min)\r\nfunction generateDefaultDate() {\r\n  const tdyDay = dateOfToday.getDay();\r\n  const tdyHour = dateOfToday.getHours();\r\n  const tdyMinute = dateOfToday.getMinutes();\r\n\r\n  const isAfterCutoff = (cutoffHour) => {\r\n    return tdyHour > cutoffHour || (tdyHour === cutoffHour && tdyMinute >= 1);\r\n  };\r\n\r\n  switch (tdyDay) {\r\n    case 0: // Sunday\r\n      setDefaultDate(isAfterCutoff(15));\r\n      break;\r\n    case 5: // Friday\r\n    case 6: // Saturday\r\n      setDefaultDate(isAfterCutoff(19));\r\n      break;\r\n    default: // Monday to Thursday\r\n      setDefaultDate(isAfterCutoff(18));\r\n  }\r\n\r\n  // Helper function to set the default date and min date\r\n  function setDefaultDate(isAfterCutoff) {\r\n    if (isAfterCutoff) {\r\n      dateInput.value = tomorrow;\r\n      dateInput.min = tomorrow;\r\n    } else {\r\n      dateInput.value = today;\r\n      dateInput.min = today;\r\n    }\r\n  }\r\n}","'use strict';\r\n\r\n// Set default time for time picker\r\n\r\n// ******** INITIALIZATION ******** //\r\n\r\n// Generate time options when the page loads\r\ngenerateTimeOptions();\r\n\r\n// Update default date and time every minute\r\n// to ensure the booking time is not outdated\r\nsetInterval(updateAtSpecificTimes, 60 * 1000);\r\n\r\n\r\n// ******** EVENT LISTENERS ******** //\r\n\r\n// Add event listener to date input to generate time options\r\ndateInput.addEventListener('input', generateTimeOptions);\r\n\r\n\r\n// ******** FUNCTIONS ******** //\r\n\r\n// Helper function to generate time options for a specific range\r\nfunction generateOptionsForRange(endHour, currentHour, currentMinute) {\r\n  for (let hour = 12; hour <= endHour; hour++) {\r\n    for (let minute = 0; minute < 60; minute += 15) {\r\n      if (hour === endHour && (minute === 15 || minute === 30 || minute === 45)) {\r\n        continue;\r\n      }\r\n      if (hour > currentHour + 1 || (hour === currentHour + 1 && minute >= currentMinute)) {\r\n        const optionText = hour + ':' + pad(minute);\r\n        const option = new Option(optionText, optionText); // Set the value same as the text\r\n        timeInput.add(option);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Function to generate time options based on current day and time\r\nfunction generateTimeOptions() {\r\n  const now = new Date();\r\n  const dayIndex = now.getDay();\r\n  const currentHour = now.getHours();\r\n  const currentMinute = now.getMinutes();\r\n\r\n  // Clear existing options (if any)\r\n  timeInput.innerHTML = '';\r\n\r\n  // Add initial option for time (placeholder: Select Time)\r\n  timeInput.appendChild(timeFirstOption);\r\n\r\n  if (dateInput.value === today) {\r\n    switch (dayIndex) {\r\n      case 0: // Sunday\r\n        generateOptionsForRange(16, currentHour, currentMinute);\r\n        break;\r\n      case 5:\r\n      case 6: // Friday & Saturday\r\n        generateOptionsForRange(20, currentHour, currentMinute);\r\n        break;\r\n      default: // Monday to Thursday\r\n        generateOptionsForRange(19, currentHour, currentMinute);\r\n    }\r\n  }\r\n  else if (dateInput.value > today) {\r\n    // If the chosen day is not today\r\n    const selectedDate = new Date(dateInput.value);\r\n    const chosenDay = selectedDate.getDay();\r\n    switch (chosenDay) {\r\n      case 0: // Sunday\r\n        generateOptionsForRange(16, -1, -1);\r\n        break;\r\n      case 5:\r\n      case 6: // Friday & Saturday\r\n        generateOptionsForRange(20, -1, -1);\r\n        break;\r\n      default: // Monday to Thursday\r\n        generateOptionsForRange(19, -1, -1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateAtSpecificTimes() {\r\n  let currentTime = new Date();\r\n  let currentHour = currentTime.getHours();\r\n  let currentMinute = currentTime.getMinutes();\r\n\r\n  // Check if the current time is between 11am and 8pm\r\n  if (currentHour >= 11 && currentHour < 20) {\r\n    // Check if the current minute is 01, 16, 31, or 46\r\n    if (currentMinute === 1 || currentMinute === 16 || currentMinute === 31 || currentMinute === 46) {\r\n      generateDefaultDate();\r\n      generateTimeOptions();\r\n    }\r\n  }\r\n}","'use strict';\r\n\r\n// ******** EVENT LISTENERS ******** //\r\n\r\n// Add event listeners to option elements to change the text color to solid black color\r\nguestNumberInput.addEventListener('change', function () {\r\n    selectOption(guestNumberInput);\r\n});\r\n\r\ntimeInput.addEventListener('change', function () {\r\n    selectOption(timeInput);\r\n});\r\n\r\n\r\n// ******** FUNCTIONS ******** //\r\n\r\n// Function to change the text color of selected option\r\nfunction selectOption(selectedElement) {\r\n    // Check if a valid option (not the disabled one) is selected\r\n    if (selectedElement.value !== \"\") {\r\n        // If a valid option is selected, add the 'valid' class to change its color\r\n        selectedElement.classList.add('valid');\r\n    } else {\r\n        // If a valid option is yet to be selected, remove the 'valid' class to revert to its default color\r\n        selectedElement.classList.remove('valid');\r\n    }\r\n}","'use strict';\r\n\r\n// ******** EVENT LISTENERS ******** //\r\n\r\n// First form validation on clicking the submit button\r\nsubmitButton.addEventListener('click', (event) => {\r\n\r\n    // If the input is incorrect or empty, \r\n    // show the error message and attach relevant class (styling) and aria-attributes to the elements\r\n\r\n    //Validate name input\r\n    const trimmedValue = nameInput.value.trim(); // Trim the input value\r\n\r\n    if (nameInput.validity.patternMismatch || trimmedValue.length < 2 || nameInput.value === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        nameInput.classList.add('error-input');\r\n        nameInput.setAttribute('aria-describedby', 'name-error');\r\n        nameInput.setAttribute('aria-invalid', 'true');\r\n        nameError.style.display = \"block\";\r\n    } else {\r\n        nameInput.classList.remove('error-input');\r\n        nameError.style.display = \"none\";\r\n    }\r\n\r\n    //Validate phone number input\r\n    if (phoneNumberInput.validity.patternMismatch || phoneNumberInput.value === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        phoneNumberInput.classList.add('error-input');\r\n        phoneNumberInput.setAttribute('aria-describedby', 'phone-error');\r\n        phoneNumberInput.setAttribute('aria-invalid', 'true');\r\n        phoneNumberError.style.display = \"block\";\r\n    } else {\r\n        phoneNumberInput.classList.remove('error-input');\r\n        phoneNumberError.style.display = \"none\";\r\n    }\r\n\r\n    //Validate email input\r\n    if (emailInput.validity.patternMismatch || emailInput.value === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        emailInput.classList.add('error-input');\r\n        emailInput.setAttribute('aria-describedby', 'email-error');\r\n        emailInput.setAttribute('aria-invalid', 'true');\r\n        emailError.style.display = \"block\";\r\n    } else {\r\n        emailInput.classList.remove('error-input');\r\n        emailError.style.display = \"none\";\r\n    }\r\n\r\n    //Validate guest number input\r\n    if (guestNumberInput.value === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        guestNumberInput.classList.add('error-input');\r\n        guestNumberInput.setAttribute('aria-describedby', 'guest-number-error');\r\n        guestNumberInput.setAttribute('aria-invalid', 'true');\r\n        guestNumberError.style.display = \"block\";\r\n    } else {\r\n        guestNumberInput.classList.remove('error-input');\r\n        guestNumberError.style.display = \"none\";\r\n    }\r\n\r\n    //Validate date input\r\n    // Get the selected date from the date input field\r\n    const selectedDate = new Date(dateInput.value);\r\n    // Get the minimum allowed date from the min attribute of the date input field\r\n    const minDate = new Date(dateInput.min);\r\n\r\n    if (selectedDate < minDate || selectedDate === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        dateInput.classList.add('error-input');\r\n        dateInput.setAttribute('aria-describedby', 'date-error');\r\n        dateInput.setAttribute('aria-invalid', 'true');\r\n        dateError.style.display = \"block\";\r\n    } else {\r\n        dateInput.classList.remove('error-input');\r\n        dateError.style.display = \"none\";\r\n    }\r\n\r\n    //Validate time input\r\n    if (timeInput.value === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        timeInput.classList.add('error-input');\r\n        timeInput.setAttribute('aria-describedby', 'time-error');\r\n        timeInput.setAttribute('aria-invalid', 'true');\r\n        timeError.style.display = \"block\";\r\n    } else {\r\n        timeInput.classList.remove('error-input');\r\n        timeError.style.display = \"none\";\r\n    }\r\n\r\n    // Alert the user about the erroneous input\r\n    if (nameError.style.display === \"block\" || phoneNumberError.style.display === \"block\" || emailError.style.display === \"block\" || guestNumberError.style.display === \"block\" || dateError.style.display === \"block\" || timeError.style.display === \"block\") {\r\n        alert(\"Please provide valid input.\");\r\n    }\r\n\r\n    // Add event listeners to form elements after the first submission of form,\r\n    // for ongoing validation of inputs\r\n    nameInput.addEventListener('input', nameInputEvent);\r\n    phoneNumberInput.addEventListener('input', phoneNumberInputEvent);\r\n    emailInput.addEventListener('input', emailInputEvent);\r\n    guestNumberInput.addEventListener('input', guestNumberInputEvent);\r\n    dateInput.addEventListener('input', dateInputEvent);\r\n    timeInput.addEventListener('input', timeInputEvent);\r\n});\r\n\r\n\r\n// ******** FUNCTIONS ******** //\r\n\r\n// Function to continuously validate name input after first submission\r\nfunction nameInputEvent() {\r\n    const letterPattern = /^[A-Za-z\\.' \\-]+$/;\r\n    const trimmedValue = nameInput.value.trim(); // Trim the input value\r\n\r\n    if (trimmedValue.length > 1 && letterPattern.test(trimmedValue)) {\r\n        nameInput.classList.remove('error-input');\r\n        nameInput.removeAttribute('aria-describedby', 'name-error');\r\n        nameInput.removeAttribute('aria-invalid', 'true');\r\n        nameError.style.display = \"none\";\r\n    } else {\r\n        nameInput.classList.add('error-input');\r\n        nameInput.setAttribute('aria-describedby', 'name-error');\r\n        nameInput.setAttribute('aria-invalid', 'true');\r\n        nameError.style.display = \"block\";\r\n    }\r\n}\r\n\r\n// Function to continuously validate phone number input after first submission\r\nfunction phoneNumberInputEvent() {\r\n    const numberPattern = /[0-9+]/g;\r\n\r\n    if (phoneNumberInput.value.length > 6 && numberPattern.test(phoneNumberInput.value)) {\r\n        phoneNumberInput.classList.remove('error-input');\r\n        phoneNumberInput.removeAttribute('aria-describedby', 'phone-error');\r\n        phoneNumberInput.removeAttribute('aria-invalid', 'true');\r\n        phoneNumberError.style.display = \"none\";\r\n    } else {\r\n        phoneNumberInput.classList.add('error-input');\r\n        phoneNumberInput.setAttribute('aria-describedby', 'phone-error');\r\n        phoneNumberInput.setAttribute('aria-invalid', 'true');\r\n        phoneNumberError.style.display = \"block\";\r\n    }\r\n}\r\n\r\n// Function to continuously validate email input after first submission\r\nfunction emailInputEvent() {\r\n    const emailPattern = /^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,}$/;\r\n\r\n    if (emailPattern.test(emailInput.value)) {\r\n        emailInput.classList.remove('error-input');\r\n        emailInput.removeAttribute('aria-describedby', 'email-error');\r\n        emailInput.removeAttribute('aria-invalid', 'true');\r\n        emailError.style.display = \"none\";\r\n    } else {\r\n        emailInput.classList.add('error-input');\r\n        emailInput.setAttribute('aria-describedby', 'email-error');\r\n        emailInput.setAttribute('aria-invalid', 'true');\r\n        emailError.style.display = \"block\";\r\n    }\r\n}\r\n\r\n// Function to continuously validate guest number input after first submission\r\nfunction guestNumberInputEvent() {\r\n    if (guestNumberInput.value === '') {\r\n        guestNumberInput.classList.add('error-input');\r\n        guestNumberInput.setAttribute('aria-describedby', 'guest-number-error');\r\n        guestNumberInput.setAttribute('aria-invalid', 'true');\r\n        guestNumberError.style.display = \"block\";\r\n    } else {\r\n        guestNumberInput.classList.remove('error-input');\r\n        guestNumberInput.removeAttribute('aria-describedby', 'guest-number-error');\r\n        guestNumberInput.removeAttribute('aria-invalid', 'true');\r\n        guestNumberError.style.display = \"none\";\r\n    }\r\n}\r\n\r\n// Function to continuously validate date input after first submission\r\nfunction dateInputEvent() {\r\n    // Get the selected date from the date input field\r\n    const selectedDate = new Date(dateInput.value);\r\n    // Get the minimum allowed date from the min attribute of the date input field\r\n    const minDate = new Date(dateInput.min);\r\n\r\n    if (selectedDate >= minDate) {\r\n        dateInput.classList.remove('error-input');\r\n        dateInput.removeAttribute('aria-describedby', 'date-error');\r\n        dateInput.removeAttribute('aria-invalid', 'true');\r\n        dateError.style.display = \"none\";\r\n    } else {\r\n        dateInput.classList.add('error-input');\r\n        dateInput.setAttribute('aria-describedby', 'date-error');\r\n        dateInput.setAttribute('aria-invalid', 'true');\r\n        dateError.style.display = \"block\";\r\n    }\r\n}\r\n\r\n// Function to continuously validate time input after first submission\r\nfunction timeInputEvent() {\r\n    if (timeInput.value === '') {\r\n        timeInput.classList.add('error-input');\r\n        timeInput.setAttribute('aria-describedby', 'time-error');\r\n        timeInput.setAttribute('aria-invalid', 'true');\r\n        timeError.style.display = \"block\";\r\n    } else {\r\n        timeInput.classList.remove('error-input');\r\n        timeInput.removeAttribute('aria-describedby', 'time-error');\r\n        timeInput.removeAttribute('aria-invalid', 'true');\r\n        timeError.style.display = \"none\";\r\n    }\r\n}","'use strict';\r\n\r\n// ******** EVENT LISTENERS ******** //\r\n\r\n// Open the modal when the user clicks the form submit button\r\nsubmitButton.addEventListener(\"click\", openModal);\r\n\r\n// Submit form upon confirmation of information\r\nconfirmButton.addEventListener(\"click\", submitForm);\r\n\r\n// Add an event listener to the close button and cancel button to close the message\r\ncloseButton.addEventListener(\"click\", closeMessage);\r\ncancelButton.addEventListener(\"click\", closeMessage);\r\n\r\n// Add an event listener to the window to close the message\r\nwindow.addEventListener('keydown', closeMessageByEsc);\r\n\r\n\r\n// ******** FUNCTIONS ******** //\r\n\r\n// Function to open the modal when the user clicks the form submit button\r\nfunction openModal(event) {\r\n    event.preventDefault(); // Prevent default form submission\r\n    confirmationMessage.style.display = \"flex\";\r\n    confirmationMessage.setAttribute('aria-modal', 'true');\r\n\r\n    // Copy the value of inputs or options in the form to confirmation message\r\n    nameValue.textContent = nameInput.value;\r\n    phoneValue.textContent = phoneNumberInput.value;\r\n    emailValue.textContent = emailInput.value;\r\n    guestNumberValue.textContent = guestNumberInput.value;\r\n    dateValue.textContent = dateInput.value;\r\n    timeValue.textContent = timeInput.options[timeInput.selectedIndex].text\r\n\r\n    // If the message input value is blank or default value,\r\n    // the corresponding text in the confirmation message will be N/A\r\n    if (messageInput.value === '' || messageInput.value === '(e.g. Dietary Restriction, Special Occasions)') {\r\n        messageValue.textContent = \"N/A\";\r\n    } else {\r\n        // Encode the message input value to prevent HTML injection\r\n        const encodedMessage = encodeHTML(messageInput.value);\r\n        messageValue.innerHTML = encodedMessage;\r\n    }\r\n}\r\n\r\n// Function to encode HTML entities\r\nfunction encodeHTML(text) {\r\n    return text.replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/'/g, '&#39;')\r\n        .replace(/(\\r\\n|\\n|\\r)/g, '<br>'); // Preserve line breaks\r\n}\r\n\r\n// Function to submit form\r\nfunction submitForm() {\r\n    // Parse the selected date value from the form\r\n    const selectedDateString = dateValue.innerText.trim(); // Get the date string and remove leading/trailing spaces\r\n    const selectedDateComponents = selectedDateString.split('-');\r\n    const selectedYear = parseInt(selectedDateComponents[0]);\r\n    const selectedMonth = parseInt(selectedDateComponents[1]);\r\n    const selectedDate = parseInt(selectedDateComponents[2]);\r\n\r\n    // Set date of today as a benchmark date to do comparison\r\n    const benchmarkDateComponents = today.split('-');\r\n    const benchmarkYear = parseInt(benchmarkDateComponents[0]);\r\n    const benchmarkMonth = parseInt(benchmarkDateComponents[1]);\r\n    const benchmarkDate = parseInt(benchmarkDateComponents[2]);\r\n\r\n    // console.log(\"selected date: \" + selectedDate);\r\n    // console.log(\"benchmark date: \" + benchmarkDate);\r\n\r\n    // Parse the selected time value from the form\r\n    const timeString = timeValue.innerText.trim(); // Get the time string and remove leading/trailing spaces\r\n    const timeComponents = timeString.split(':');\r\n    const selectedHour = parseInt(timeComponents[0]);\r\n    const selectedMinute = parseInt(timeComponents[1]);\r\n\r\n    let currentTime = new Date();\r\n    let currentHour = currentTime.getHours();\r\n    let currentMinute = currentTime.getMinutes();\r\n\r\n    // console.log(\"selected time: \" + timeString);\r\n    // console.log(\"current hour: \" + currentHour);\r\n    // console.log(\"current minute: \" + currentMinute);\r\n\r\n    // Check if the selected date is before today's date or if it's today but the selected time has passed\r\n    if (selectedYear < benchmarkYear || selectedMonth < benchmarkMonth || selectedDate < benchmarkDate || (selectedDate === benchmarkDate && (selectedHour < currentHour + 1 || (selectedHour === currentHour + 1 && selectedMinute < currentMinute)))) {\r\n        alert(\"Please select another available day or time slot.\");\r\n        closeMessage();\r\n        generateDefaultDate();\r\n        generateTimeOptions();\r\n    } else {\r\n        // Trigger form submission\r\n        reservationForm.submit();\r\n        alert(\"Thanks for choosing our restaurant!\\nWe will contact you shortly to confirm your reservation.\");\r\n\r\n        // Hide the following 2 lines if the PHP file is ready\r\n        closeMessage();\r\n        reservationForm.reset();\r\n    }\r\n}\r\n\r\n// Function to close the message\r\nfunction closeMessage() {\r\n    confirmationMessage.style.display = \"none\";\r\n    confirmationMessage.setAttribute('aria-modal', 'false');\r\n}\r\n\r\n// Function to close the message by hitting the \"ESC\" key\r\nfunction closeMessageByEsc(event) {\r\n    if (event.keyCode == 27) { // Check if the key pressed is 'esc'\r\n        closeMessage();\r\n    }\r\n}","'use strict';\r\n// Textarea in reservation form\r\n// 1. When on focus, clear placeholder \r\n// 2. When input is detected, change the text to solid color\r\n// 3. When it is empty and loses focus, reset the placeholder\r\n\r\n\r\n// ******** EVENT LISTENERS ******** //\r\n\r\n// Clear placeholder when on focus\r\nmessageInput.addEventListener('focus', () => {\r\n  if (messageInput.value.trim() === placeholderText) {\r\n    messageInput.value = ''; // Clear the text\r\n  }\r\n});\r\n\r\n// Change color of messageInput when user inputs\r\nmessageInput.addEventListener('input', () => {\r\n  messageInput.classList.toggle('input', messageInput.value.trim() !== '');\r\n});\r\n\r\n// Reset the placeholder if the messageInput is empty when it loses focus\r\nmessageInput.addEventListener('blur', () => {\r\n  if (messageInput.value.trim() === '') {\r\n    messageInput.value = placeholderText;\r\n    messageInput.classList.remove('input');\r\n  }\r\n});","'use strict';\r\n\r\n// Automatically update the year for the copyright in footer\r\ndocument.getElementById(\"year\").textContent = dateOfToday.getFullYear();"]}