{"version":3,"sources":["footer.js","navbar.js","menu/carousel.js","menu/largeMenu.js","menu/smallMenu.js","reservationForm/formdefaultValues.js","reservationForm/formSelect.js","reservationForm/formTextarea.js","reservationForm/formValidation.js","reservationForm/popUpMessage.js"],"names":[],"mappingsplPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtfile":"non-critical-modern-script.js","sourcesContent":["'use strict';\r\n\r\n// year for the footer (copyright)\r\nconst copyrightDate = new Date();\r\nlet copyrightYear = copyrightDate.getFullYear();\r\ndocument.getElementById(\"year\").textContent = copyrightYear;\r\n","'use strict';\r\n\r\nconst navBar = document.getElementById(\"navbar\");\r\nconst navbarToggler = document.querySelector('.navbar__toggler');\r\nconst navList = document.querySelector('.navbar__collapse');\r\nconst navLinks = document.querySelectorAll('.navbar__nav-link');\r\nconst home = document.getElementById(\"home\");\r\n\r\n// Show or hide the collapsible navbar when toggler is clicked\r\nnavbarToggler.addEventListener('click', (event) => {\r\n  navList.classList.toggle('is-opened');\r\n  if (navList.style.maxHeight) {\r\n    navList.style.maxHeight = null;\r\n    navbarToggler.setAttribute('aria-expanded', 'false');\r\n    negativeTabIndex();\r\n  } else {\r\n    navList.style.maxHeight = navList.scrollHeight + \"px\";\r\n    navbarToggler.setAttribute('aria-expanded', 'true');\r\n    zeroTabIndex();\r\n  }\r\n  event.stopPropagation();\r\n});\r\n\r\n\r\n// Hide the collapsible navbar when the nav link is clicked \r\n// or when the user clicks anywhere outside of the navbar\r\ndocument.addEventListener('click', () => {\r\n  if (navList.classList.contains('is-opened')) {\r\n    closeNavbar();\r\n  }\r\n});\r\n\r\n// Function to close the collapsible navbar\r\nfunction closeNavbar() {\r\n  if (navList.classList.contains('is-opened')) {\r\n    navList.style.maxHeight = null;\r\n    navList.classList.remove('is-opened');\r\n    navbarToggler.setAttribute('aria-expanded', 'false');\r\n    negativeTabIndex();\r\n  }\r\n}\r\n\r\nconst findusLink = document.getElementById('findus-link');\r\nfindusLink.addEventListener('keydown', closeNavbarByTab);\r\n\r\nfunction closeNavbarByTab(event) {\r\n  const keyCode = event.keyCode || event.which;\r\n  if (event.shiftKey && event.keyCode == 9) { // Check if the key pressed is 'tab'\r\n    // act normally if pressing \"shift\" + \"tab\" (going backwards)\r\n  } else if (keyCode === 9) {\r\n    closeNavbar();\r\n  }\r\n}\r\n\r\n// When the user scrolls down, hide the navbar. When the user scrolls up, show the navbar \r\nlet prevScrollPos = window.scrollY;\r\n\r\nwindow.onscroll = function () {\r\n  let currentScrollPos = window.scrollY;\r\n  let screenWidth = window.innerWidth;\r\n\r\n  if (screenWidth > 900) {\r\n    if (prevScrollPos > currentScrollPos) {\r\n      navbar.style.top = \"0\";\r\n    } else {\r\n      navbar.style.top = \"-500px\";\r\n    }\r\n  }\r\n\r\n  prevScrollPos = currentScrollPos;\r\n}\r\n\r\n// adjust the padding top of the hero image according to the screen size\r\nwindow.onresize = function () {\r\n  // Update the screenWidth variable with the current window width\r\n  let screenWidth = window.innerWidth;\r\n\r\n  // Check the screenWidth and adjust paddingTop accordingly\r\n  if (screenWidth <= 350 || screenWidth <= 600 && screenWidth > 450) {\r\n    home.style.paddingTop = \"70px\";\r\n  } else {\r\n    home.style.paddingTop = \"0px\";\r\n  }\r\n}\r\n\r\n// add or remove aria-attributes values of menu toggler\r\nfunction addDefaultAriaAttributes() {\r\n  navbarToggler.setAttribute('aria-expanded', 'false');\r\n}\r\n\r\nfunction removeDefaultAriaAttributes() {\r\n  navbarToggler.removeAttribute('aria-expanded', 'false');\r\n}\r\n\r\n// tabindex of navlinks\r\nfunction zeroTabIndex() {\r\n  for (let i = 0; i < navLinks.length; i++) {\r\n    navLinks[i].setAttribute('tabindex', '0');\r\n    navLinks[i].setAttribute('aria-hidden', 'false');\r\n  }\r\n}\r\n\r\nfunction negativeTabIndex() {\r\n  for (let i = 0; i < navLinks.length; i++) {\r\n    navLinks[i].setAttribute('tabindex', '-1');\r\n    navLinks[i].setAttribute('aria-hidden', 'true');\r\n  }\r\n}\r\n\r\nwindow.addEventListener('load', checkScreenSize);\r\n// when the screen re-sizes, close navbar, set tabindex to -1, and add or remove aria-attributes\r\nwindow.addEventListener('resize', checkScreenSize);\r\n\r\nfunction checkScreenSize() {\r\n  closeNavbar();\r\n\r\n  let screenWidth = window.innerWidth;\r\n  if (screenWidth <= 576) {\r\n    addDefaultAriaAttributes();\r\n    negativeTabIndex();\r\n  } else {\r\n    removeDefaultAriaAttributes();\r\n    zeroTabIndex();\r\n  }\r\n}","'use strict';\r\n\r\n//carousel for small & medium menu\r\nlet slideIndex = 1;\r\nshowSlides(slideIndex);\r\n\r\nfunction showSlides(n) {\r\n  let i;\r\n  let slides = document.getElementsByClassName(\"small-menu__carousel__slide\");\r\n  let dots = document.getElementsByClassName(\"small-menu__carousel-dot\");\r\n  if (n > slides.length || slideIndex > slides.length) { slideIndex = 1 }\r\n  if (n < 1) { slideIndex = slides.length }\r\n  for (i = 0; i < slides.length; i++) {\r\n    slides[i].className = slides[i].className.replace(\" current-slide\", \"\");\r\n  }\r\n  for (i = 0; i < dots.length; i++) {\r\n    dots[i].className = dots[i].className.replace(\" current-dot\", \"\");\r\n    dots[i].setAttribute('aria-current', 'false');\r\n  }\r\n  slides[slideIndex - 1].className += \" current-slide\";\r\n  dots[slideIndex - 1].className += \" current-dot\";\r\n  dots[slideIndex - 1].setAttribute('aria-current', 'true');\r\n}\r\n\r\nfunction autoplay() {\r\n  slideIndex++;\r\n  showSlides();\r\n}\r\n\r\nlet timer = setInterval(autoplay, 3500)\r\n\r\nfunction resetTimer() {\r\n  clearInterval(timer);\r\n  timer = setInterval(autoplay, 3500);\r\n}\r\n\r\nfunction plusSlides(n) {\r\n  showSlides(slideIndex += n);\r\n  resetTimer();\r\n}\r\n\r\nfunction currentSlide(n) {\r\n  showSlides(slideIndex = n);\r\n  resetTimer();\r\n}","'use strict';\r\n\r\nfunction openMenu(event, menuName) {\r\n  let i, menutabs, menus;\r\n\r\n  menutabs = document.getElementsByClassName(\"large-menu__tab\");\r\n  for (i = 0; i < menutabs.length; i++) {\r\n    menutabs[i].classList.remove(\"large-menu__tab--active\");\r\n    menutabs[i].setAttribute('aria-selected', 'false');\r\n  }\r\n  event.currentTarget.classList.add(\"large-menu__tab--active\");\r\n  event.currentTarget.setAttribute('aria-selected', 'true');\r\n\r\n  menus = document.getElementsByClassName(\"large-menu__panel\");\r\n  for (i = 0; i < menus.length; i++) {\r\n    menus[i].style.display = \"none\";\r\n  }\r\n  document.getElementById(menuName).style.display = \"grid\";\r\n}\r\n\r\ndocument.getElementById(\"pasta-tab\").click();","'use strict';\r\n\r\nconst menuAccordion = document.getElementsByClassName(\"small-menu__accordion__button\");\r\n\r\n// open the accordion when the website is loaded\r\nwindow.addEventListener('load', openMenuPanel)\r\n\r\nfunction openMenuPanel() {\r\n  for (let i = 0; i < menuAccordion.length; i++) {\r\n    if (menuAccordion[i].classList.contains(\"small-menu__accordion__button--active\")) {\r\n      menuAccordion[i].setAttribute('aria-expanded', 'true');\r\n      let menuPanel = menuAccordion[i].nextElementSibling;\r\n      menuPanel.style.maxHeight = menuPanel.scrollHeight + \"px\";\r\n      menuPanel.style.border = \"1px solid rgba(226, 186, 137, 0.842)\";\r\n      menuPanel.classList.add(\"small-menu__accordion__panel--open\");\r\n      menuPanel.setAttribute('role', 'region');\r\n    }\r\n  }\r\n};\r\n\r\n\r\n// open or close the accordion through clicks\r\nfor (let i = 0; i < menuAccordion.length; i++) {\r\n  menuAccordion[i].addEventListener(\"click\", function () {\r\n    this.classList.toggle(\"small-menu__accordion__button--active\");\r\n\r\n    // toggle aria-expanded value\r\n    let expanded = this.getAttribute('aria-expanded');\r\n    if (expanded === 'true') {\r\n      this.setAttribute('aria-expanded', 'false');\r\n    } else {\r\n      this.setAttribute('aria-expanded', 'true');\r\n    };\r\n\r\n    // toggle open or close panel, and aria-hidden value\r\n    let menuPanel = this.nextElementSibling;\r\n    if (menuPanel.classList.contains(\"small-menu__accordion__panel--open\")) {\r\n      menuPanel.style.maxHeight = null;\r\n      menuPanel.classList.remove(\"small-menu__accordion__panel--open\");\r\n      menuPanel.style.border = \"none\";\r\n      menuPanel.removeAttribute('role', 'region');\r\n    } else {\r\n      menuPanel.style.maxHeight = menuPanel.scrollHeight + \"px\";\r\n      menuPanel.style.border = \"1px solid rgba(226, 186, 137, 0.842)\";\r\n      menuPanel.classList.add(\"small-menu__accordion__panel--open\");\r\n      menuPanel.setAttribute('role', 'region');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n// when the screen re-sizes, open the accordion\r\nwindow.addEventListener('resize', handleResize);\r\n\r\nfunction handleResize() {\r\n  let screenWidth = window.innerWidth;\r\n  if (screenWidth <= 450) {\r\n    openMenuPanel();\r\n  }\r\n}","'use strict';\r\n\r\n// default date and time values in reservation form\r\n// get date of today\r\nconst dateOfToday = new Date();\r\nconst tdyDay = dateOfToday.getDay();\r\nlet tdyDate = dateOfToday.getDate();\r\nlet tdyMth = dateOfToday.getMonth() + 1;\r\nconst tdyYear = dateOfToday.getFullYear();\r\nconst tdyHour = dateOfToday.getHours();\r\nconst tdyMinute = dateOfToday.getMinutes();\r\n\r\n//make the date and/or month in 2-digit format\r\nif (tdyDate < 10) {\r\n  tdyDate = \"0\" + tdyDate;\r\n}\r\nif (tdyMth < 10) {\r\n  tdyMth = \"0\" + tdyMth;\r\n}\r\n\r\nconst today = tdyYear + \"-\" + tdyMth + \"-\" + tdyDate;\r\n\r\n// get date of tomorrow\r\nconst dateOfTmr = new Date(new Date().setDate(dateOfToday.getDate() + 1));\r\nlet tmrDate = dateOfTmr.getDate();\r\nlet tmrMth = dateOfTmr.getMonth() + 1;\r\nconst tmrYear = dateOfTmr.getFullYear();\r\n\r\n//make the date and/or month in 2-digit format\r\nif (tmrDate < 10) {\r\n  tmrDate = \"0\" + tmrDate;\r\n}\r\nif (tmrMth < 10) {\r\n  tmrMth = \"0\" + tmrMth;\r\n}\r\n\r\nconst tomorrow = tmrYear + \"-\" + tmrMth + \"-\" + tmrDate;\r\n\r\n\r\n// date picker - set default date (.value) and prevent choosing invalid dates (.min)\r\nconst dateInput = document.getElementById('date');\r\n\r\nfunction generateDefaultDate() {\r\n  switch (tdyDay) {\r\n    case 0: //Sunday\r\n      if ((tdyHour > 15) || (tdyHour === 15 && tdyMinute >= 1)) {\r\n        dateInput.value = tomorrow;\r\n        dateInput.min = tomorrow;\r\n\r\n      } else {\r\n        dateInput.value = today;\r\n        dateInput.min = today;\r\n      }\r\n      break;\r\n    case 5:\r\n    case 6: //Friday & Saturday\r\n      if ((tdyHour > 19) || (tdyHour === 19 && tdyMinute >= 1)) {\r\n        dateInput.value = tomorrow;\r\n        dateInput.min = tomorrow;\r\n      } else {\r\n        dateInput.value = today;\r\n        dateInput.min = today;\r\n      }\r\n      break;\r\n    default: //Monday to Thursday\r\n      if ((tdyHour > 18) || (tdyHour === 18 && tdyMinute >= 1)) {\r\n        dateInput.value = tomorrow;\r\n        dateInput.min = tomorrow;\r\n      } else {\r\n        dateInput.value = today;\r\n        dateInput.min = today;\r\n      }\r\n  }\r\n}\r\n\r\n// Generate default date when the page loads\r\ngenerateDefaultDate();\r\n\r\ndateInput.addEventListener('input', generateTimeOptions);\r\n\r\n\r\n// time picker - set default time\r\n// Function to pad single digit numbers with leading zero\r\nfunction pad(number) {\r\n  return (number < 10 ? '0' : '') + number;\r\n}\r\n\r\n// Function to check if current time is within restaurant opening hours\r\nfunction isWithinOpeningHours(day, hour, minute) {\r\n  const openingHours = {\r\n    Sunday: { start: 1200, end: 1700 },\r\n    Monday: { start: 1200, end: 2000 },\r\n    Tuesday: { start: 1200, end: 2000 },\r\n    Wednesday: { start: 1200, end: 2000 },\r\n    Thursday: { start: 1200, end: 2000 },\r\n    Friday: { start: 1200, end: 2100 },\r\n    Saturday: { start: 1200, end: 2100 }\r\n  };\r\n\r\n  const currentTime = hour * 100 + minute;\r\n  const { start, end } = openingHours[day];\r\n\r\n  return currentTime >= start && currentTime <= end;\r\n}\r\n\r\n// Function to generate time options based on current day and time\r\nfunction generateTimeOptions() {\r\n  const now = new Date();\r\n  const day = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][now.getDay()];\r\n  const days = now.getDay();\r\n  const currentHour = now.getHours();\r\n  const currentMinute = now.getMinutes();\r\n  const timeSelect = document.getElementById('time');\r\n  const timeFirstOption = document.getElementById('time-first-option');\r\n\r\n  // Clear existing options (if any)\r\n  timeSelect.innerHTML = '';\r\n\r\n  // Add initial option\r\n  timeSelect.appendChild(timeFirstOption);\r\n\r\n  if (dateInput.value === today) {\r\n    switch (days) {\r\n      case 0:\r\n        for (let hour = 12; hour <= 16; hour++) {\r\n          for (let minute = 0; minute < 60; minute += 15) {\r\n            // Skip generating options for 4:15pm, 4:30pm, and 4:45pm\r\n            if (hour === 16 && (minute === 15 || minute === 30 || minute === 45)) {\r\n              continue;\r\n            }\r\n\r\n            if (isWithinOpeningHours(day, hour, minute) && (hour > currentHour + 1 || (hour === currentHour + 1 && minute >= currentMinute))) {\r\n              const optionText = hour + ':' + pad(minute);\r\n              const option = new Option(optionText, optionText); // Set the value same as the text\r\n              timeSelect.add(option);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case 5:\r\n      case 6:\r\n        for (let hour = 12; hour <= 20; hour++) {\r\n          for (let minute = 0; minute < 60; minute += 15) {\r\n            // Skip generating options for 8:15pm, 8:30pm, and 8:45pm\r\n            if (hour === 20 && (minute === 15 || minute === 30 || minute === 45)) {\r\n              continue;\r\n            }\r\n\r\n            if (isWithinOpeningHours(day, hour, minute) && (hour > currentHour + 1 || (hour === currentHour + 1 && minute >= currentMinute))) {\r\n              const optionText = hour + ':' + pad(minute);\r\n              const option = new Option(optionText, optionText); // Set the value same as the text\r\n              timeSelect.add(option);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      default: //Monday to Thursday\r\n        for (let hour = 12; hour <= 19; hour++) {\r\n          for (let minute = 0; minute < 60; minute += 15) {\r\n            // Skip generating options for 7:15pm, 7:30pm, and 7:45pm\r\n            if (hour === 19 && (minute === 15 || minute === 30 || minute === 45)) {\r\n              continue;\r\n            }\r\n\r\n            if (isWithinOpeningHours(day, hour, minute) && (hour > currentHour + 1 || (hour === currentHour + 1 && minute >= currentMinute))) {\r\n              const optionText = hour + ':' + pad(minute);\r\n              const option = new Option(optionText, optionText); // Set the value same as the text\r\n              timeSelect.add(option);\r\n            }\r\n          }\r\n        }\r\n    }\r\n  }\r\n  else if (dateInput.value > today) {\r\n    const selectedDate = new Date(dateInput.value);\r\n    const chosenDay = selectedDate.getDay();\r\n    switch (chosenDay) {\r\n      case 0:\r\n        for (let hour = 12; hour <= 16; hour++) {\r\n          for (let minute = 0; minute < 60; minute += 15) {\r\n            // Skip generating options for 4:15pm, 4:30pm, and 4:45pm\r\n            if (hour === 16 && (minute === 15 || minute === 30 || minute === 45)) {\r\n              continue;\r\n            }\r\n\r\n            const optionText = hour + ':' + pad(minute);\r\n            const option = new Option(optionText, optionText); // Set the value same as the text\r\n            timeSelect.add(option);\r\n          }\r\n        }\r\n        break;\r\n      case 5:\r\n      case 6:\r\n        for (let hour = 12; hour <= 20; hour++) {\r\n          for (let minute = 0; minute < 60; minute += 15) {\r\n            // Skip generating options for 8:15pm, 8:30pm, and 8:45pm\r\n            if (hour === 20 && (minute === 15 || minute === 30 || minute === 45)) {\r\n              continue;\r\n            }\r\n\r\n            const optionText = hour + ':' + pad(minute);\r\n            const option = new Option(optionText, optionText); // Set the value same as the text\r\n            timeSelect.add(option);\r\n          }\r\n        }\r\n        break;\r\n      default: //Monday to Thursday\r\n        for (let hour = 12; hour <= 19; hour++) {\r\n          for (let minute = 0; minute < 60; minute += 15) {\r\n            // Skip generating options for 7:15pm, 7:30pm, and 7:45pm\r\n            if (hour === 19 && (minute === 15 || minute === 30 || minute === 45)) {\r\n              continue;\r\n            }\r\n\r\n            const optionText = hour + ':' + pad(minute);\r\n            const option = new Option(optionText, optionText); // Set the value same as the text\r\n            timeSelect.add(option);\r\n          }\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\n// Generate time options when the page loads\r\ngenerateTimeOptions();\r\n\r\n// update the default date and time at certain interval\r\nfunction updateAtSpecificTimes() {\r\n  let currentTime = new Date();\r\n  let currentHour = currentTime.getHours();\r\n  let currentMinute = currentTime.getMinutes();\r\n\r\n  // Check if the current time is between 11am and 8pm\r\n  if (currentHour >= 11 && currentHour < 20) {\r\n    // Check if the current minute is 01, 16, 31, or 46\r\n    if (currentMinute === 1 || currentMinute === 16 || currentMinute === 31 || currentMinute === 46) {\r\n      generateDefaultDate();\r\n      generateTimeOptions();\r\n    }\r\n  }\r\n}\r\n\r\nsetInterval(updateAtSpecificTimes, 60 * 1000);","'use strict';\r\n\r\nlet selectGuestNumberElement = document.getElementById('guest-number');\r\nlet selectTimeElement = document.getElementById('time');\r\n\r\nfunction optionSelected(selectedElement) {\r\n    // Check if a valid option (not the disabled one) is selected\r\n    if (selectedElement.value !== \"\") {\r\n        // If a valid option is selected, add the 'valid' class to change its color\r\n        selectedElement.classList.add('valid');\r\n    } else {\r\n        // If the disabled option is selected, remove the 'valid' class to revert to the default color\r\n        selectedElement.classList.remove('valid');\r\n    }\r\n}\r\n\r\nselectGuestNumberElement.addEventListener('change', function () {\r\n    optionSelected(selectGuestNumberElement);\r\n});\r\n\r\nselectTimeElement.addEventListener('change', function () {\r\n    optionSelected(selectTimeElement);\r\n});","'use strict';\r\n\r\n// textarea in reservation form\r\nconst textarea = document.getElementById('message');\r\n\r\nfunction clearPlaceholder() {\r\n  // Check if the current value is equal to the placeholder text\r\n  if (textarea.value.trim() === '(e.g. Dietary Restriction, Special Occasions)') {\r\n    textarea.value = ''; // Clear the text\r\n  }\r\n\r\n  // Remove the onfocus event to prevent further clearing\r\n  textarea.removeEventListener('focus', clearPlaceholder);\r\n}\r\n\r\n// Add an event listener to reset the placeholder if the textarea is empty when it loses focus\r\ntextarea.addEventListener('blur', function () {\r\n  if (textarea.value.trim() === '') {\r\n    textarea.value = '(e.g. Dietary Restriction, Special Occasions)';\r\n    textarea.addEventListener('focus', clearPlaceholder);\r\n  }\r\n});\r\n\r\n// change color of textarea when user inputs\r\ntextarea.addEventListener('input', function () {\r\n  if (textarea.value.trim() !== '') {\r\n    textarea.classList.add('input');\r\n  } else {\r\n    textarea.classList.remove('input');\r\n  }\r\n});","'use strict';\r\n\r\nconst submitButton = document.getElementById('formSumbitButton');\r\n\r\nconst nameInput = document.getElementById(\"name\");\r\nconst nameError = document.getElementById(\"name-error\");\r\nconst phoneNumberInput = document.getElementById(\"phone\");\r\nconst phoneNumberError = document.getElementById(\"phone-error\");\r\nconst emailInput = document.getElementById(\"email\");\r\nconst emailError = document.getElementById(\"email-error\");\r\nconst guestNumberInput = document.getElementById(\"guest-number\");\r\nconst guestNumberError = document.getElementById(\"guest-number-error\");\r\nconst dateError = document.getElementById(\"date-error\");\r\nconst timeInput = document.getElementById(\"time\");\r\nconst timeError = document.getElementById(\"time-error\");\r\n\r\n// first validation on submit\r\nsubmitButton.addEventListener('click', (event) => {\r\n\r\n    //validate name input\r\n    const trimmedValue = nameInput.value.trim(); // Trim the input value\r\n\r\n    if (nameInput.validity.patternMismatch || trimmedValue.length < 2 || nameInput.value === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        nameInput.classList.add('error-input');\r\n        nameInput.setAttribute('aria-describedby', 'name-error');\r\n        nameInput.setAttribute('aria-invalid', 'true');\r\n        nameError.style.display = \"block\";\r\n    } else {\r\n        nameInput.classList.remove('error-input');\r\n        nameError.style.display = \"none\";\r\n    }\r\n\r\n    //validate phone number input\r\n    if (phoneNumberInput.validity.patternMismatch || phoneNumberInput.value === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        phoneNumberInput.classList.add('error-input');\r\n        phoneNumberInput.setAttribute('aria-describedby', 'phone-error');\r\n        phoneNumberInput.setAttribute('aria-invalid', 'true');\r\n        phoneNumberError.style.display = \"block\";\r\n    } else {\r\n        phoneNumberInput.classList.remove('error-input');\r\n        phoneNumberError.style.display = \"none\";\r\n    }\r\n\r\n    //validate email input\r\n    if (emailInput.validity.patternMismatch || emailInput.value === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        emailInput.classList.add('error-input');\r\n        emailInput.setAttribute('aria-describedby', 'email-error');\r\n        emailInput.setAttribute('aria-invalid', 'true');\r\n        emailError.style.display = \"block\";\r\n    } else {\r\n        emailInput.classList.remove('error-input');\r\n        emailError.style.display = \"none\";\r\n    }\r\n\r\n    //validate guest number input\r\n    if (guestNumberInput.value === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        guestNumberInput.classList.add('error-input');\r\n        guestNumberInput.setAttribute('aria-describedby', 'guest-number-error');\r\n        guestNumberInput.setAttribute('aria-invalid', 'true');\r\n        guestNumberError.style.display = \"block\";\r\n    } else {\r\n        guestNumberInput.classList.remove('error-input');\r\n        guestNumberError.style.display = \"none\";\r\n    }\r\n\r\n    //validate date input\r\n    // Get the selected date from the date input field\r\n    const selectedDate = new Date(dateInput.value);\r\n    // Get the minimum allowed date from the min attribute of the date input field\r\n    const minDate = new Date(dateInput.min);\r\n\r\n    // Check if the selected date\r\n    if (selectedDate < minDate || selectedDate === '') {\r\n        event.preventDefault();\r\n        dateInput.classList.add('error-input');\r\n        dateInput.setAttribute('aria-describedby', 'date-error');\r\n        dateInput.setAttribute('aria-invalid', 'true');\r\n        dateError.style.display = \"block\";\r\n    } else {\r\n        dateInput.classList.remove('error-input');\r\n        dateError.style.display = \"none\";\r\n    }\r\n\r\n    //validate time input\r\n    if (timeInput.value === '') {\r\n        event.preventDefault(); // Prevent form submission if there are validation errors\r\n        timeInput.classList.add('error-input');\r\n        timeInput.setAttribute('aria-describedby', 'time-error');\r\n        timeInput.setAttribute('aria-invalid', 'true');\r\n        timeError.style.display = \"block\";\r\n    } else {\r\n        timeInput.classList.remove('error-input');\r\n        timeError.style.display = \"none\";\r\n    }\r\n\r\n    if (nameError.style.display === \"block\" || phoneNumberError.style.display === \"block\" || emailError.style.display === \"block\" || guestNumberError.style.display === \"block\" || dateError.style.display === \"block\" || timeError.style.display === \"block\") {\r\n        alert(\"Please provide valid input.\");\r\n    }\r\n\r\n    // Add the input event listener after first submission\r\n    nameInput.addEventListener('input', nameInputEvent);\r\n    phoneNumberInput.addEventListener('input', phoneNumberInputEvent);\r\n    emailInput.addEventListener('input', emailInputEvent);\r\n    guestNumberInput.addEventListener('input', guestNumberInputEvent);\r\n    dateInput.addEventListener('input', dateInputEvent);\r\n    timeInput.addEventListener('input', timeInputEvent);\r\n});\r\n\r\nfunction nameInputEvent() {\r\n    const letterPattern = /^[A-Za-z\\.' \\-]+$/;\r\n    const trimmedValue = nameInput.value.trim(); // Trim the input value\r\n\r\n    if (trimmedValue.length > 1 && letterPattern.test(trimmedValue)) {\r\n        nameInput.classList.remove('error-input');\r\n        nameInput.removeAttribute('aria-describedby', 'name-error');\r\n        nameInput.removeAttribute('aria-invalid', 'true');\r\n        nameError.style.display = \"none\";\r\n    } else {\r\n        nameInput.classList.add('error-input');\r\n        nameInput.setAttribute('aria-describedby', 'name-error');\r\n        nameInput.setAttribute('aria-invalid', 'true');\r\n        nameError.style.display = \"block\";\r\n    }\r\n}\r\n\r\nfunction phoneNumberInputEvent() {\r\n    const numberPattern = /[0-9+]/g;\r\n\r\n    if (phoneNumberInput.value.length > 6 && numberPattern.test(phoneNumberInput.value)) {\r\n        phoneNumberInput.classList.remove('error-input');\r\n        phoneNumberInput.removeAttribute('aria-describedby', 'phone-error');\r\n        phoneNumberInput.removeAttribute('aria-invalid', 'true');\r\n        phoneNumberError.style.display = \"none\";\r\n    } else {\r\n        phoneNumberInput.classList.add('error-input');\r\n        phoneNumberInput.setAttribute('aria-describedby', 'phone-error');\r\n        phoneNumberInput.setAttribute('aria-invalid', 'true');\r\n        phoneNumberError.style.display = \"block\";\r\n    }\r\n}\r\n\r\nfunction emailInputEvent() {\r\n    const emailPattern = /^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,}$/;\r\n\r\n    if (emailPattern.test(emailInput.value)) {\r\n        emailInput.classList.remove('error-input');\r\n        emailInput.removeAttribute('aria-describedby', 'email-error');\r\n        emailInput.removeAttribute('aria-invalid', 'true');\r\n        emailError.style.display = \"none\";\r\n    } else {\r\n        emailInput.classList.add('error-input');\r\n        emailInput.setAttribute('aria-describedby', 'email-error');\r\n        emailInput.setAttribute('aria-invalid', 'true');\r\n        emailError.style.display = \"block\";\r\n    }\r\n}\r\n\r\nfunction guestNumberInputEvent() {\r\n    if (guestNumberInput.value === '') {\r\n        guestNumberInput.classList.add('error-input');\r\n        guestNumberInput.setAttribute('aria-describedby', 'guest-number-error');\r\n        guestNumberInput.setAttribute('aria-invalid', 'true');\r\n        guestNumberError.style.display = \"block\";\r\n    } else {\r\n        guestNumberInput.classList.remove('error-input');\r\n        guestNumberInput.removeAttribute('aria-describedby', 'guest-number-error');\r\n        guestNumberInput.removeAttribute('aria-invalid', 'true');\r\n        guestNumberError.style.display = \"none\";\r\n    }\r\n}\r\n\r\nfunction dateInputEvent() {\r\n    // Get the selected date from the date input field\r\n    const selectedDate = new Date(dateInput.value);\r\n    // Get the minimum allowed date from the min attribute of the date input field\r\n    const minDate = new Date(dateInput.min);\r\n\r\n    if (selectedDate >= minDate) {\r\n        dateInput.classList.remove('error-input');\r\n        dateInput.removeAttribute('aria-describedby', 'date-error');\r\n        dateInput.removeAttribute('aria-invalid', 'true');\r\n        dateError.style.display = \"none\";\r\n    } else {\r\n        dateInput.classList.add('error-input');\r\n        dateInput.setAttribute('aria-describedby', 'date-error');\r\n        dateInput.setAttribute('aria-invalid', 'true');\r\n        dateError.style.display = \"block\";\r\n    }\r\n}\r\n\r\nfunction timeInputEvent() {\r\n    if (timeInput.value === '') {\r\n        timeInput.classList.add('error-input');\r\n        timeInput.setAttribute('aria-describedby', 'time-error');\r\n        timeInput.setAttribute('aria-invalid', 'true');\r\n        timeError.style.display = \"block\";\r\n    } else {\r\n        timeInput.classList.remove('error-input');\r\n        timeInput.removeAttribute('aria-describedby', 'time-error');\r\n        timeInput.removeAttribute('aria-invalid', 'true');\r\n        timeError.style.display = \"none\";\r\n    }\r\n}","'use strict';\r\n\r\nconst reservationMessage = document.getElementById(\"reservation-message\");\r\nconst confirmButton = document.querySelector(\".reservation__confirmation-message__bottom-button--confirm\");\r\nconst closeButton = document.querySelector(\".reservation__confirmation-message__close-button\");\r\nconst cancelButton = document.querySelector(\".reservation__confirmation-message__bottom-button--cancel\");\r\n\r\nconst messageInput = document.getElementById(\"message\");\r\n\r\nlet nameValue = document.getElementById(\"name-value\");\r\nlet phoneValue = document.getElementById(\"phone-value\");\r\nlet emailValue = document.getElementById(\"email-value\");\r\nlet guestNumberValue = document.getElementById(\"guest-number-value\");\r\nlet dateValue = document.getElementById(\"date-value\");\r\nlet timeValue = document.getElementById(\"time-value\");\r\nlet messageValue = document.getElementById(\"optional-message-value\");\r\nlet messageTimer = document.getElementById(\"message-timer\");\r\n\r\n// Open the modal\r\nfunction openModal(event) {\r\n    event.preventDefault(); // Prevent default form submission\r\n    // messageTimer.textContent = \"15:00\";\r\n    // startTimer();\r\n    reservationMessage.style.display = \"flex\";\r\n    nameValue.textContent = nameInput.value;\r\n    phoneValue.textContent = phoneNumberInput.value;\r\n    emailValue.textContent = emailInput.value;\r\n    guestNumberValue.textContent = guestNumberInput.value;\r\n    dateValue.textContent = dateInput.value;\r\n    timeValue.textContent = timeInput.options[timeInput.selectedIndex].text\r\n    if (messageInput.value === '' || messageInput.value === '(e.g. Dietary Restriction, Special Occasions)') {\r\n        messageValue.textContent = \"N/A\";\r\n    } else {\r\n        // Encode the message input value to prevent HTML injection\r\n        const encodedMessage = encodeHTML(messageInput.value);\r\n        messageValue.innerHTML = encodedMessage;\r\n    }\r\n}\r\n\r\n// Function to encode HTML entities\r\nfunction encodeHTML(text) {\r\n    return text.replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/'/g, '&#39;')\r\n        .replace(/(\\r\\n|\\n|\\r)/g, '<br>'); // Preserve line breaks\r\n}\r\n\r\n// Submit form upon confirmation of information\r\nconfirmButton.addEventListener(\"click\", formSubmitted);\r\n\r\nfunction formSubmitted() {\r\n    // Parse the selected date and time values from the form\r\n    const selectedDateString = dateValue.innerText.trim();\r\n    const selectedDateComponents = selectedDateString.split('-');\r\n    const selectedYear = parseInt(selectedDateComponents[0]);\r\n    const selectedMonth = parseInt(selectedDateComponents[1]);\r\n    const selectedDate = parseInt(selectedDateComponents[2]);\r\n\r\n    const benchmarkDateComponents = today.split('-');\r\n    const benchmarkYear = parseInt(benchmarkDateComponents[0]);\r\n    const benchmarkMonth = parseInt(benchmarkDateComponents[1]);\r\n    const benchmarkDate = parseInt(benchmarkDateComponents[2]);\r\n    // console.log(\"selected date: \" + selectedDate);\r\n    // console.log(\"benchmark date: \" + benchmarkDate);\r\n\r\n    let currentTime = new Date();\r\n    let currentHour = currentTime.getHours();\r\n    let currentMinute = currentTime.getMinutes();\r\n\r\n\r\n    const timeString = timeValue.innerText.trim(); // Get the time string and remove leading/trailing spaces\r\n    const timeComponents = timeString.split(':');\r\n    const selectedHour = parseInt(timeComponents[0]);\r\n    const selectedMinute = parseInt(timeComponents[1]);\r\n\r\n    // console.log(\"selected time: \" + timeString);\r\n    // console.log(\"current hour: \" + currentHour);\r\n    // console.log(\"current minute: \" + currentMinute);\r\n\r\n    // Check if the selected date is before today's date or if it's today but the selected time has passed\r\n    if (selectedYear < benchmarkYear || selectedMonth < benchmarkMonth || selectedDate < benchmarkDate || (selectedDate === benchmarkDate && (selectedHour < currentHour + 1 || (selectedHour === currentHour + 1 && selectedMinute < currentMinute)))) {\r\n        alert(\"Please select another available day or time slot.\");\r\n        closeMessage();\r\n        generateDefaultDate();\r\n        generateTimeOptions();\r\n    } else {\r\n        // Trigger form submission\r\n        document.querySelector('form').submit();\r\n        alert(\"Thanks for choosing our restaurant!\\nWe will contact you shortly to confirm your reservation.\");\r\n\r\n        // Hide the following 2 lines if the PHP file is ready\r\n        closeMessage();\r\n        document.getElementById(\"myForm\").reset();\r\n    }\r\n}\r\n\r\n\r\n// Add an event listener to the close button and cancel button to close the message\r\ncloseButton.addEventListener(\"click\", closeMessage);\r\n\r\ncancelButton.addEventListener(\"click\", closeMessage);\r\n\r\nfunction closeMessage() {\r\n    reservationMessage.style.display = \"none\";\r\n}\r\n\r\nwindow.addEventListener('keydown', closeMessageByEsc);\r\n\r\nfunction closeMessageByEsc(event) {\r\n    if (event.keyCode == 27) { // Check if the key pressed is 'esc'\r\n        closeMessage();\r\n    }\r\n}"]}